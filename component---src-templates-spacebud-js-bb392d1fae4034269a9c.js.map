{"version":3,"file":"component---src-templates-spacebud-js-bb392d1fae4034269a9c.js","mappings":"gbAAMA,EAAAA,WAAAA,SAAAA,KAaH,OAbGA,EAAAA,UACEC,KAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,kFACMC,KAAKC,MADX,iEAKqB,uDALrB,OAKED,KAAKC,MALP,yGAAMF,IAAN,6BAUA,WACE,OAAOC,KAAKC,UACb,EAbGH,GAgBN,MAAmBA,E,sBCTNI,EAAU,SAACC,GAAD,OAASC,EAAAA,GAAAA,KAAYD,EAAK,QACpCE,EAAQ,SAACC,GAAD,OAAWF,EAAAA,GAAAA,KAAYE,GAAOC,SAAS,QAC/CC,EAAa,SAACC,GAAD,OACxBA,EACGF,WACAG,MAAM,IACNC,KAAI,SAACC,GAAD,MAAO,IAAMA,KACjBC,KAAK,KACGC,EAAY,SAACX,GAAD,OAASC,EAAAA,GAAAA,KAAYD,GAAKI,SAAS,QAE/CQ,EAAgB,SAACC,GAC5B,IAAMC,EAAanB,EAAAA,QAAAA,WAAAA,MACboB,EAAWF,EAAOG,MAAK,SAACC,GAAD,MAA0B,aAAfA,EAAMC,SAChC,OACT,IAAIC,IACLN,EACGO,QAAO,SAACH,GAAD,MAA0B,aAAfA,EAAMC,QACxBV,KAAI,SAACS,GAAD,OAAWA,EAAMC,KAAKG,MAAM,EAAG,SAGjCC,SAAQ,SAACC,GAChB,IAAMC,EAAeX,EAAOO,QAC1B,SAACH,GAAD,OAAWA,EAAMC,KAAKG,MAAM,EAAG,MAAQE,KAEnCE,EAAc9B,EAAAA,QAAAA,OAAAA,MACpB6B,EAAaF,SAAQ,SAACL,GACpBQ,EAAYC,OACV/B,EAAAA,QAAAA,UAAAA,IAA6BM,EAAAA,GAAAA,KAAYgB,EAAMC,KAAKG,MAAM,IAAK,QAC/D1B,EAAAA,QAAAA,OAAAA,SAA+BsB,EAAMU,cAGzCb,EAAWY,OACT/B,EAAAA,QAAAA,WAAAA,WAAqCM,EAAAA,GAAAA,KAAYsB,EAAQ,QACzDE,MAGJ,IAAMG,EAAQjC,EAAAA,QAAAA,MAAAA,IACZA,EAAAA,QAAAA,OAAAA,SAA+BoB,EAAWA,EAASY,SAAW,MAGhE,OADId,EAAOgB,OAAS,IAAMd,IAAUa,EAAME,eAAehB,GAClDc,GAgCIG,EAAkB,SAACC,GAC9B,IAAMC,EAAeD,EAClBE,wBACAC,OACAC,IAAI,GACJF,wBACAC,OACH,MAAO,CACLE,WAAY1C,EAAAA,QAAAA,eAAAA,WACVsC,EAAaG,IAAI,GAAGE,YAEtBC,MAAOrC,EAAM+B,EAAaG,IAAI,GAAGE,YACjCE,gBAAiBP,EAAaG,IAAI,GAAGK,aAAaC,WASzCC,EAAqB,SAACC,EAAQC,GACzC,OAAOD,EACJE,YAAYnD,EAAAA,QAAAA,OAAAA,SAA+B,OAC3CoD,YAAYF,ICjGXG,EAA2B,oBAAXC,QAA0BA,OAAOD,OA+LnDE,EAAqB,KAMnBC,EAAgB,CAQpBC,sBAAuB,SAACC,EAASC,EAASC,EAASC,GACjDN,EAAqB,CACnBG,QAASA,EACTC,QAASA,EACTC,QAASA,EACTC,UAAWA,IAWfC,cAAe,SAACC,EAAQC,EAASC,EAAOC,GACtC,QADsD,IAAhBA,IAAAA,EAAS,KAC1CX,EACH,MAAM,IAAIY,MACR,6DAQJ,IALA,IAAMC,EACJf,EAAOW,EAAQK,OAAShB,EAAOE,EAAmBG,SAEhDT,EAASjD,EAAAA,QAAAA,MAAAA,IAAyBA,EAAAA,QAAAA,OAAAA,SAA+B,MAE5DsE,EAAI,EAAGA,EAAIJ,EAAOhC,OAAQoC,IACjCrB,EAASsB,EAAWL,EAAOI,GAAGE,SAASvB,SAAUA,GAiBnD,IAbA,IAAIwB,EAAgB,CAClBC,WAAU,OAAKR,GACfS,WAAU,OAAKZ,GACfa,OAAQ,GACR3B,OAAQA,GAGN4B,EAoSR,SAA6Bb,GAK3B,IAJA,IAAIc,EAAqB9E,EAAAA,QAAAA,MAAAA,IACvBA,EAAAA,QAAAA,OAAAA,SAA+B,MAGxBsE,EAAI,EAAGA,EAAIN,EAAQK,MAAOC,IACjCQ,EAAqBP,EACnBP,EAAQvB,IAAI6B,GAAGrB,SACf6B,GAIJ,OAAOA,EAhTsBC,CAAoBf,GAG3CgB,EAgUR,SAAsBC,GACpB,IAAIC,EAAe,GAEnB,GAAID,EAAQE,aAGV,IAFA,IAAIC,EAAKH,EAAQE,aAERb,EAAI,EAAGA,EAAIc,EAAGC,OAAOhB,MAAOC,IAGnC,IAFA,IAAIgB,EAAaF,EAAGC,OAAO5C,IAAI6B,GAEtBiB,EAAI,EAAGA,EAAIH,EAAG3C,IAAI6C,GAAYD,OAAOhB,MAAOkB,IAAK,CACxD,IAAIC,EAAUxF,EAAAA,QAAAA,OAAAA,MACVyF,EAAYL,EAAG3C,IAAI6C,GAAYD,OAAO5C,IAAI8C,GAE9CC,EAAQzD,OACN/B,EAAAA,QAAAA,UAAAA,WAAoCyF,EAAUC,YAC9C1F,EAAAA,QAAAA,OAAAA,WACEoF,EAAG3C,IAAI6C,GAAY7C,IAAIgD,GAAWC,aAItC,IAAIC,EAAc3F,EAAAA,QAAAA,WAAAA,MAClB2F,EAAY5D,OACV/B,EAAAA,QAAAA,WAAAA,WAAqCsF,EAAWI,YAChDF,GAEF,IAAII,EAAS5F,EAAAA,QAAAA,MAAAA,IACXA,EAAAA,QAAAA,OAAAA,SAA+B,MAEjC4F,EAAOzD,eAAewD,GAEtBT,EAAaW,KAAKD,GAexB,OATAV,EAAeY,EAAeZ,EAAc,SAG/BW,KACX7F,EAAAA,QAAAA,MAAAA,IACEA,EAAAA,QAAAA,OAAAA,WAAiCiF,EAAQc,OAAOL,cAI7CR,EA7WqBA,CAAaL,GAG9BP,EAAI,EAAGA,EAAIU,EAAoB9C,OAAQoC,IAC9C0B,EAAavB,EAAeO,EAAoBV,IAEhDG,EAAgBwB,EACdxB,EACAO,EAAoBV,GACpBL,EACAG,GAKJY,EAAsBc,EAAed,GAErC,IAAK,IAAIV,EAAI,EAAGA,EAAIU,EAAoB9C,OAAQoC,IAAK,CACnD0B,EAAavB,EAAeO,EAAoBV,IAEhD,IAAI4B,EAAQ,GACZA,EAAMC,MAAQnG,EAAAA,QAAAA,MAAAA,IACZA,EAAAA,QAAAA,OAAAA,SAA+B,MAE9BoG,YAAYpB,EAAoBV,IAChC8B,YAAYpB,EAAoBV,IACnC4B,EAAMG,QAAUrG,EAAAA,QAAAA,MAAAA,IACdA,EAAAA,QAAAA,OAAAA,SAA+B,MAE9BoG,YAAYF,EAAMC,OAClBC,YAAYpB,EAAoBV,IAEnCgC,EACE7B,EACAO,EAAoBV,GACpBL,EAAQQ,EAAcC,UAAUxC,OAChCgE,GAKJ,GAAIzB,EAAcE,UAAUzC,OAAS,EAAG,CACtC,IAAMqE,EAAS9B,EAAcxB,OAAOuD,YAAY3B,GAE5C4B,EAAYzG,EAAAA,QAAAA,MAAAA,IACdA,EAAAA,QAAAA,iBACEuG,EACAvG,EAAAA,QAAAA,OAAAA,SAA+BuD,EAAmBG,WAIlDgD,EACFrD,EAAOE,EAAmBI,SACxBN,EAAOE,EAAmBM,WAC5BR,EAAOE,EAAmBK,SAQ5B,GANA8C,EAAS1G,EAAAA,QAAAA,MAAAA,IACPA,EAAAA,QAAAA,OAAAA,SAA+B0G,EAAOjG,aAKpCkG,EAAQJ,EAFZE,EAAYA,EAAUL,YAAYM,IAED,EAAG,CAElC,IAAME,EAASH,EACZD,YAAYxG,EAAAA,QAAAA,MAAAA,IAAyBuG,EAAOR,SAC5CK,YAAYpG,EAAAA,QAAAA,MAAAA,IAAyByE,EAAcxB,OAAO8C,SAE7DC,EAAavB,EAAemC,GAC5BnC,EAAgBwB,EAAOxB,EAAemC,EAAQ3C,EAAOG,IAIzD,MAAO,CACLyC,MAAOpC,EAAcC,UACrBF,OAAQR,EACRW,UAAWF,EAAcE,UACzB1B,OAAQwB,EAAcxB,OACtBsD,OAAQ9B,EAAcxB,OAAOuD,YAAY3B,MAgB/C,SAASoB,EAAOxB,EAAeqC,EAAc7C,EAAO8C,GAClD,IACEtC,EAAgBuC,EAmapB,SAA4BvC,GAC1B,MAAO,CACLC,UAAWuC,EAAcxC,EAAcC,WACvCC,UAAWsC,EAAcxC,EAAcE,WACvCC,OAAQqC,EAAcxC,EAAcG,QACpC3B,OAAQiE,EAAWzC,EAAcxB,SAva/BkE,CAAmB1C,GACnBqC,EACA7C,EAAQQ,EAAcC,UAAUxC,OAChC6E,GAEF,MAAOK,GACP,GAAkB,yBAAdA,EAAEC,QASJ,MAAMD,EAPN3C,EA2EN,SAAoBA,EAAeqC,EAAc7C,EAAO8C,GAEtDtC,EAAcG,OAASH,EAAcG,OAAO0C,MAAK,SAACC,EAAGC,GACnD,OAAOC,OACLC,EAAkBZ,EAAcU,EAAEhD,SAASvB,UACzCyE,EAAkBZ,EAAcS,EAAE/C,SAASvB,cAIjD,EAAG,CACD,GAAIgB,GAAS,EACX,MAAM,IAAIE,MAAM,wBAGlB,GAAIM,EAAcG,OAAO1C,QAAU,EAAG,CACpC,GAAIyF,EAAeb,EAAcrC,EAAcxB,OAAQ,EAAG,GACxD,MAAM,IAAIkB,MAAM,kBAElB,MAAM,IAAIA,MAAM,oBAIlB,IAAIyD,EAAOnD,EAAcG,OAAOiD,OAAO,EAAG,GAAGC,MAE7CrD,EAAcC,UAAUmB,KAAK+B,GAC7BnD,EAAcxB,OAASsB,EACrBqD,EAAKpD,SAASvB,SACdwB,EAAcxB,QAGhBgB,WAEC0D,EACCb,EACArC,EAAcxB,OACd8D,EACAtC,EAAcG,OAAO1C,OAAS,IAWlC,OANAuC,EAAcE,UAAd,kBACKF,EAAcE,YADnB,OAEKF,EAAcG,SAEnBH,EAAcG,OAAS,GAEhBH,EA1HasD,CACdtD,EACAqC,EACA7C,EAAQQ,EAAcC,UAAUxC,OAChC6E,GAON,OAAOtC,EAcT,SAASuC,EAAavC,EAAeqC,EAAc7C,EAAO8C,GACxD,IAAIiB,EAAavD,EAAcG,OAAO1C,OAEtC,GACEyF,EAAeb,EAAcrC,EAAcxB,OAAQ8D,EAAciB,GAOjE,OALAvD,EAAcE,UAAd,kBACKF,EAAcE,YADnB,OAEKF,EAAcG,SAEnBH,EAAcG,OAAS,GAChBH,EAGT,GAAIR,GAAS,EACX,MAAM,IAAIE,MAAM,wBAGlB,GAAI6D,GAAc,EAAG,CACnB,GAAIL,EAAeb,EAAcrC,EAAcxB,OAAQ,EAAG,GACxD,MAAM,IAAIkB,MAAM,kBAElB,MAAM,IAAIA,MAAM,oBAIlB,IAAIyD,EAAOnD,EAAcG,OACtBiD,OAAOI,KAAKC,MAAMD,KAAKE,SAAWH,GAAa,GAC/CF,MAQH,OANArD,EAAcC,UAAUmB,KAAK+B,GAC7BnD,EAAcxB,OAASsB,EACrBqD,EAAKpD,SAASvB,SACdwB,EAAcxB,QAGT+D,EAAavC,EAAeqC,EAAc7C,EAAQ,EAAG8C,GAuE9D,SAAST,EAAQ7B,EAAeqC,EAAc7C,EAAOiC,GACnD,IAAI8B,EAAavD,EAAcG,OAAO1C,OAEtC,GACEyE,EAAQlC,EAAcxB,OAAQiD,EAAMC,QAAU,GAC9C6B,GAAc,GACd/D,GAAS,EAST,OANAQ,EAAcE,UAAd,kBACKF,EAAcE,YADnB,OAEKF,EAAcG,cAEnBH,EAAcG,OAAS,IAMzB,IAAMgD,EAAOnD,EAAcG,OACxBiD,OAAOI,KAAKC,MAAMD,KAAKE,SAAWH,GAAa,GAC/CF,MAEGM,EAAYpI,EAAAA,QAAAA,MAAAA,IAChBA,EAAAA,QAAAA,OAAAA,SAA+B,MAE9BoG,YAAYwB,EAAKpD,SAASvB,UAC1BmD,YAAYU,GAiBf,OAdEuB,EAAIC,EAAepC,EAAMC,OAASmC,EAAeF,IAC/CC,EAAIC,EAAepC,EAAMC,OAASmC,EAAexB,KACnDH,EAAQyB,EAAWlC,EAAMG,UAAY,GAErC5B,EAAcC,UAAUmB,KAAK+B,GAC7BnD,EAAcxB,OAASsB,EACrBqD,EAAKpD,SAASvB,SACdwB,EAAcxB,QAEhBgB,KAEAQ,EAAcE,UAAUkB,KAAK+B,GAGxBtB,EAAQ7B,EAAeqC,EAAc7C,EAAOiC,GA6BrD,SAAS3B,EAAWU,EAASsD,GAC3B,OAAOA,EAAgBnC,YAAYnB,GA+DrC,SAASa,EAAe0C,EAAYC,GAClC,YADqD,IAAnBA,IAAAA,EAAY,OACvCD,EAAWlB,MAAK,SAACC,EAAGC,GACzB,IAAIkB,EAAiCrF,EAAT,SAAdoF,GAA+B,EAAY,GACzD,OAAOhB,QAAQa,EAAef,GAAKe,EAAed,IAAMkB,MAS5D,SAASJ,EAAerF,GACtB,IAAI0F,EAAMtF,EAAO,GACbjC,EAAWiC,EAAOJ,EAAO8C,OAAO6C,UAEpC,GAAIxH,EAAW,EACbuH,EAAMvH,OACD,GAAI6B,EAAOkC,cAAgBlC,EAAOkC,aAAad,MAAQ,EAAG,CAC/D,IAAIiB,EAAarC,EAAOkC,aAAaE,OAAO5C,IAAI,GAC5CgD,EAAYxC,EAAOkC,aAAa1C,IAAI6C,GAAYD,OAAO5C,IAAI,GAC/DkG,EAAMtF,EAAOJ,EAAOkC,aAAa1C,IAAI6C,GAAY7C,IAAIgD,GAAWmD,UAGlE,OAAOD,EAST,SAASjB,EAAkBmB,EAAQC,GACjC,IAAIH,EAAMtF,EAAO,GAGjB,GAFeA,EAAOwF,EAAO9C,OAAO6C,UAErB,EACbD,EAAMtF,EAAOyF,EAAS/C,OAAO6C,eACxB,GACLC,EAAO1D,cACP2D,EAAS3D,cACT0D,EAAO1D,aAAad,MAAQ,GAC5ByE,EAAS3D,aAAad,MAAQ,EAC9B,CACA,IAAIiB,EAAauD,EAAO1D,aAAaE,OAAO5C,IAAI,GAC5CgD,EAAYoD,EAAO1D,aAAa1C,IAAI6C,GAAYD,OAAO5C,IAAI,GAC/DkG,EAAMtF,EAAOyF,EAAS3D,aAAa1C,IAAI6C,GAAY7C,IAAIgD,GAAWmD,UAGpE,OAAOD,EAQT,SAAS3C,EAAavB,EAAeD,GACnC,GAAInB,EAAOmB,EAAOuB,OAAO6C,UAAYvF,EAAO,GAAI,CAG9C,IAFA,IAAIuB,EAAS,GACTD,EAAY,GACPL,EAAI,EAAGA,EAAIG,EAAcE,UAAUzC,OAAQoC,SAGhDyE,IADApC,EAAQlC,EAAcE,UAAUL,GAAGE,SAASvB,SAAUuB,GAGtDI,EAAOiB,KAAKpB,EAAcE,UAAUL,IAEpCK,EAAUkB,KAAKpB,EAAcE,UAAUL,IAG3CG,EAAcG,OAASA,EACvBH,EAAcE,UAAYA,OAE1BF,EAAcG,OAASH,EAAcE,UAAUkD,OAC7C,EACApD,EAAcE,UAAUzC,QAa9B,SAASyF,EACPb,EACAkC,EACAjC,EACAiB,GAEA,IAAI/E,EAAS6D,EAEb,GAAIC,GAAgB1D,EAAOyD,EAAaf,OAAO6C,UAAY,EAAG,CAC5D,IAAInC,EAAYzG,EAAAA,QAAAA,MAAAA,IACdA,EAAAA,QAAAA,iBACEgJ,EACAhJ,EAAAA,QAAAA,OAAAA,SAA+B+G,EAAatG,cAKhD,GAAIkG,EAAQqC,EAAiBvC,GAAa,EAAG,OAAO,EAYpD,GATIE,EAAQG,EAAcL,GAAa,IACrCxD,EAASwD,EAAUL,YACjBpG,EAAAA,QAAAA,MAAAA,IACEA,EAAAA,QAAAA,OAAAA,SAA+BuD,EAAmBG,YAMpDsE,EAAa,EAAG,CAClB,IAAItB,EACFrD,EAAOE,EAAmBI,SACxBN,EAAOE,EAAmBM,WAC5BR,EAAOE,EAAmBK,SAE5B8C,EAAS1G,EAAAA,QAAAA,MAAAA,IACPA,EAAAA,QAAAA,OAAAA,SAA+B0G,EAAOjG,aAGxCwC,EAASA,EAAOmD,YAAYM,IAIhC,OAAOC,EAAQqC,EAAiB/F,IAAW,EAsB7C,IAAMgE,EAAgB,SAACgC,GAAD,OACpBA,EAASpI,KAAI,SAAC+G,GAAD,OACX5H,EAAAA,QAAAA,yBAAAA,WAAmD4H,EAAKlC,gBAQtDwB,EAAa,SAACjF,GAAD,OAAWjC,EAAAA,QAAAA,MAAAA,WAAgCiC,EAAMyD,aAGpE,SAAS2C,EAAIa,GACX,OAAOA,EAAM,EAAIA,EAAM7F,GAAQ,GAAK6F,EAStC,SAASvC,EAAQwC,EAAOC,GACtB,IAAIC,EAAOhG,EAAO8F,EAAMpD,OAAO6C,UAC3BU,EAAOjG,EAAO+F,EAAUrD,OAAO6C,UAEnC,GAAIQ,EAAUjE,aAAc,CAC1B,IAAIoE,EAAcH,EAAUjE,aAAaE,OAAO5C,IAAI,GAChD+G,EAAaJ,EAAUjE,aAAa1C,IAAI8G,GAAalE,OAAO5C,IAAI,GAEpE,IAAI0G,EAAMhE,eAAgBgE,EAAMhE,aAAad,MAe3C,OAdA,IACE8E,EAAMhE,aAAa1C,IAAI8G,KACvBJ,EAAMhE,aAAa1C,IAAI8G,GAAa9G,IAAI+G,GASxC,OAPAH,EAAOhG,EACL8F,EAAMhE,aAAa1C,IAAI8G,GAAa9G,IAAI+G,GAAYZ,UAEtDU,EAAOjG,EACL+F,EAAUjE,aAAa1C,IAAI8G,GAAa9G,IAAI+G,GAAYZ,UAUhE,OAAOS,GAAQC,EAAQD,IAASC,EAAO,EAAI,GAAM,EAGnD,QC3yBMG,EAAW,WACf,IAAMC,EAAU1J,EAAAA,QAAAA,cAAAA,MAEhB,OADA0J,EAAQC,IAAI3J,EAAAA,QAAAA,aAAAA,IAAgCI,ECzB5C,8uZD0BOsJ,GAGHE,EAAmB,kBACvB5J,EAAAA,QAAAA,QAAAA,YACE,+DAIE6J,GAAY,WAOhB,OANc7J,EAAAA,QAAAA,WAAAA,uBACZA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B8J,GAAWC,UACtC/J,EAAAA,QAAAA,WAAAA,SAKAgK,GAAM,SAAC,GAA2B,IAAzBtH,EAAwB,EAAxBA,WAAYE,EAAY,EAAZA,MACnBqH,EAAcjK,EAAAA,QAAAA,WAAAA,MACpBiK,EAAYN,IAAI3J,EAAAA,QAAAA,WAAAA,UAAoCI,EAAQsC,KAC5DuH,EAAYN,IACV3J,EAAAA,QAAAA,WAAAA,UAAoCI,EAAQM,EAAWkC,MAEzDqH,EAAYN,IACV3J,EAAAA,QAAAA,WAAAA,YAAsCA,EAAAA,QAAAA,OAAAA,SAA+B,OAEvE,IAAMsC,EAAetC,EAAAA,QAAAA,WAAAA,MAerB,OAdAsC,EAAaqH,IACX3J,EAAAA,QAAAA,WAAAA,uBACEA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BiK,KAIQjK,EAAAA,QAAAA,WAAAA,uBACZA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B8J,GAAWI,KACtC5H,KAKA6H,GAAQ,SAAC,GAA4C,IAA1CzH,EAAyC,EAAzCA,WAAYE,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAC5BoH,EAAcjK,EAAAA,QAAAA,WAAAA,MACpBiK,EAAYN,IAAI3J,EAAAA,QAAAA,WAAAA,UAAoCI,EAAQsC,KAC5DuH,EAAYN,IACV3J,EAAAA,QAAAA,WAAAA,UAAoCI,EAAQM,EAAWkC,MAEzDqH,EAAYN,IACV3J,EAAAA,QAAAA,WAAAA,YACEA,EAAAA,QAAAA,OAAAA,SAA+B6C,KAGnC,IAAMP,EAAetC,EAAAA,QAAAA,WAAAA,MAerB,OAdAsC,EAAaqH,IACX3J,EAAAA,QAAAA,WAAAA,uBACEA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BiK,KAIQjK,EAAAA,QAAAA,WAAAA,uBACZA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B8J,GAAWM,OACtC9H,KAMAwH,GAAa,CACjBC,SAAU,EACVG,IAAK,EACLE,MAAO,GAIHC,GAAM,SAACC,GACX,IAAMC,EAAevK,EAAAA,QAAAA,WAAAA,uBACnBA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BA,EAAAA,QAAAA,WAAAA,QAYJ,OATiBA,EAAAA,QAAAA,SAAAA,IACfA,EAAAA,QAAAA,YAAAA,YACAA,EAAAA,QAAAA,OAAAA,SAA+BsK,GAC/BC,EACAvK,EAAAA,QAAAA,QAAAA,IACEA,EAAAA,QAAAA,OAAAA,SAA+B,WAC/BA,EAAAA,QAAAA,OAAAA,SAA+B,iBAK/BwK,GAAO,SAACF,GACZ,IAAMC,EAAevK,EAAAA,QAAAA,WAAAA,uBACnBA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BA,EAAAA,QAAAA,WAAAA,QAYJ,OATiBA,EAAAA,QAAAA,SAAAA,IACfA,EAAAA,QAAAA,YAAAA,YACAA,EAAAA,QAAAA,OAAAA,SAA+BsK,GAC/BC,EACAvK,EAAAA,QAAAA,QAAAA,IACEA,EAAAA,QAAAA,OAAAA,SAA+B,WAC/BA,EAAAA,QAAAA,OAAAA,SAA+B,iBAK/ByK,GAAa,SAACH,GAClB,IAAMC,EAAevK,EAAAA,QAAAA,WAAAA,uBACnBA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BA,EAAAA,QAAAA,WAAAA,QAYJ,OATiBA,EAAAA,QAAAA,SAAAA,IACfA,EAAAA,QAAAA,YAAAA,YACAA,EAAAA,QAAAA,OAAAA,SAA+BsK,GAC/BC,EACAvK,EAAAA,QAAAA,QAAAA,IACEA,EAAAA,QAAAA,OAAAA,SAA+B,WAC/BA,EAAAA,QAAAA,OAAAA,SAA+B,iBAK/B0K,GAAS,SAACJ,GACd,IAAMC,EAAevK,EAAAA,QAAAA,WAAAA,uBACnBA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BA,EAAAA,QAAAA,WAAAA,QAYJ,OATiBA,EAAAA,QAAAA,SAAAA,IACfA,EAAAA,QAAAA,YAAAA,YACAA,EAAAA,QAAAA,OAAAA,SAA+BsK,GAC/BC,EACAvK,EAAAA,QAAAA,QAAAA,IACEA,EAAAA,QAAAA,OAAAA,SAA+B,WAC/BA,EAAAA,QAAAA,OAAAA,SAA+B,iBAQ/B2K,GAAAA,WACJ,aAAiCC,GAAoB,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAClB5K,KAAK6K,SAAW,CAAEF,KAAAA,EAAMC,UAAAA,GACxB5K,KAAK0K,kBAAoBA,EAexB,IAAL,cAs7BE,OAt7BF,EACQI,kBAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAwBC,EAAUC,EAASC,GAA3C,iFACeC,MAAMlL,KAAK6K,SAASF,KAAOI,EAAU,CAChDC,QAAQ,OAAD,QACLG,WAAYnL,KAAK6K,SAASD,WACvBI,EAFE,CAGL,aAAc,0BAEhBI,OAAQH,EAAO,OAAS,MACxBA,KAAAA,IACCI,MAAK,SAACC,GAAD,OAASA,EAAIC,UATvB,+IAAMT,GAeR,EACQU,QAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAc9J,EAAQ+J,EAAQ/I,GAA9B,uFACQtB,EAAQM,EAASZ,EAAU2K,EAAS/I,GAD5C,SAGsB1C,KAAK8K,kBAAL,cACJpB,IAAmBgC,YADf,UACoCtK,GAJ1D,cAGQuK,EAHR,gBAOeC,QAAQC,IACnBF,EAAMhL,IAAN,mCAAU,WAAO+G,GAAP,2FACe,EAAKoD,kBAAL,QACbpD,EAAKoE,QADQ,aADf,OACFC,EADE,iBAON5J,EAAQ4J,EACL5K,MAAK,SAAC6K,GAAD,OArNE,KAqNKA,EAAEC,SACdC,cAAcxE,EAAKyE,cAAc3K,MAAM,KAC7BnB,EAAMsJ,KAAYnE,cAE7B4G,EAAoBL,EACjB5K,MAAK,SAAC6K,GAAD,OAzNE,KAyNKA,EAAEC,SACdC,cAAcG,QAAQ7K,MAAM,IAd3B,sDAgBA,IAAIyC,MAAM,iDAhBV,WAkBR9B,EAAQrC,EAAAA,QAAAA,WAAAA,WAAqCI,EAAQiC,IAEnD9B,EAAMP,EAAAA,QAAAA,iBAAgCqC,GAAOqD,cAC7CkC,EAAK4E,UArBC,uBAuBA,IAAIrI,MAAM,4BAvBV,iCAyBD,CACL9B,MAAAA,EACAiK,kBACEA,GACAtM,EAAAA,QAAAA,QAAAA,WAAkCI,EAAQkM,IAC5C1E,KAAM5H,EAAAA,QAAAA,yBAAAA,IACJA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,QAAAA,gBAAAA,WAA0CI,EAAQwH,EAAKoE,UACvDpE,EAAKyE,cAEPrM,EAAAA,QAAAA,kBAAAA,IACE4J,IACA3I,EAAc2G,EAAK3E,UAGvBL,MAAAA,IAxCM,yDAAV,wDARJ,+IAAM8I,GAwDR,EACQe,OAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,mGACQC,EAAY1M,EAAAA,QAAAA,mBAAAA,IAChBA,EAAAA,QAAAA,UAAAA,IACEA,EAAAA,QAAAA,OAAAA,SACEE,KAAKqD,mBAAmBoJ,UAAUhJ,SAEpC3D,EAAAA,QAAAA,OAAAA,SACEE,KAAKqD,mBAAmBoJ,UAAU/I,UAGtC5D,EAAAA,QAAAA,OAAAA,SAA+BE,KAAKqD,mBAAmBqJ,SACvD5M,EAAAA,QAAAA,OAAAA,SAA+BE,KAAKqD,mBAAmBsJ,aACvD7M,EAAAA,QAAAA,OAAAA,SAA+BE,KAAKqD,mBAAmBuJ,YACvD5M,KAAKqD,mBAAmBwJ,WACxB7M,KAAKqD,mBAAmBM,UACxB3D,KAAKqD,mBAAmByJ,SACxB9M,KAAKqD,mBAAmB0J,UACxBjN,EAAAA,QAAAA,cAAAA,IAAiCM,OAAO4M,KElS5C,y7BFkSgE,SAExDC,EAASnN,EAAAA,QAAAA,WAAAA,OAnBjB,MA9PkB,KAkRkB,GApBpC,EA7PoB,KAiRqC,GAAjDiM,EApBR,EAqBQjI,EAAUhE,EAAAA,QAAAA,mBAAAA,MArBlB,kBAsBS,CAAE0M,UAAAA,EAAWS,OAAAA,EAAQlB,SAAAA,EAAUjI,QAAAA,IAtBxC,kGAAMyI,GA2BR,EACEW,gBAAA,SAAgBnL,GACd,IAAKA,EAAMkD,aAAc,OAAO,EAChC,IAAMvD,EAAS5B,EAAAA,QAAAA,WAAAA,WACbA,EAAAA,QAAAA,eAAAA,WACEI,EAAQF,KAAKmN,aAAaC,YAC1B5H,YAEJ,OAAOzD,EAAMkD,aAAa1C,IAAIb,GAAQyC,OAK1C,EACEkJ,mBAAA,SAAmBtL,EAAOW,GAAQ,IAAD,OACzB1B,EF1QmB,SAACe,GAC5B,IAAMf,EAAS,GAEf,GADAA,EAAO2E,KAAK,CAAEtE,KAAM,WAAYS,SAAUC,EAAM8D,OAAO6C,WACnD3G,EAAMkD,aAER,IADA,IAAMqI,EAAcvL,EAAMkD,aAAaE,OAC9BE,EAAI,EAAGA,EAAIiI,EAAYnJ,MAAOkB,IAIrC,IAHA,IAAM3D,EAAS4L,EAAY/K,IAAI8C,GACzB1D,EAAeI,EAAMkD,aAAa1C,IAAIb,GACtC6L,EAAa5L,EAAawD,OACvBqI,EAAI,EAAGA,EAAID,EAAWpJ,MAAOqJ,IAAK,CACzC,IAAMC,EAAcF,EAAWhL,IAAIiL,GAC7B1L,EAAWH,EAAaY,IAAIkL,GAC5BrM,EACJhB,EAAAA,GAAAA,KAAYsB,EAAO8D,WAAY,OAAOjF,SAAS,OAC/CH,EAAAA,GAAAA,KAAYqN,EAAYC,OAAQ,OAAOnN,SAAS,OAClDS,EAAO2E,KAAK,CACVtE,KAAMD,EACNU,SAAUA,EAAS4G,WAK3B,OAAO1H,EEoPU2M,CAAc5L,GAC7B,OAAOhB,EACLC,EAAOO,QACL,SAACH,GAAD,OACEA,EAAMC,MACJ,EAAK8L,aAAaC,UAChBtM,EAAU,EAAKqM,aAAaS,kBAAoBlL,IACpDtB,EAAMC,KAAKwM,WAAW,EAAKV,aAAaC,gBAOlD,EACEU,aAAA,SACEzB,EACAtK,EAFF,GAIG,IAAD,aADgD,GAChD,EADEI,EACF,EADEA,MAAOiI,EACT,EADSA,MAAOgC,EAChB,EADgBA,kBAAmBL,EACnC,EADmCA,SAE7BgC,EAAIhM,EACJ2E,EAAS5G,EAAAA,QAAAA,iBACbiO,EACAjO,EAAAA,QAAAA,OAAAA,SAA+BE,KAAKqD,mBAAmBqJ,SACvDvK,GAASrC,EAAAA,QAAAA,iBAAgCqC,IAEX,GAA5BuE,EAAOD,QAAQsH,EAAElI,SAAckI,EAAEC,SAAStH,GAC9C,IAAMpC,EAASxE,EAAAA,QAAAA,kBAAAA,IAAqCuM,EAAS0B,GAS7D,OARI5L,IACFmC,EAAO2J,cAAcnO,EAAAA,QAAAA,iBAAgCqC,IACrD4J,EAtUc,KAsUQ3B,GAAS,KAAO/J,EAAM8B,EAAMqD,aAEhD4G,IACFL,EAxUgB,KAwUQM,QACtB,KAAOhM,EAAM+L,EAAkB8B,aAAa1I,aAEzClB,GAKX,EACE6J,cAAA,SAAc3B,EAAWb,GACvB,IAAM9H,EAAS/D,EAAAA,QAAAA,kBAAAA,MACf6L,EAAMlK,SAAQ,SAACiG,GACb7D,EAAO4F,IAAI/B,EAAKf,YAElB6F,EAAU4B,eAAevK,IAK7B,EACQwK,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,oJAwBE,IAvBA7B,EADF,EACEA,UACA8B,EAFF,EAEEA,cACA3C,EAHF,EAGEA,MACA7H,EAJF,EAIEA,QACAmJ,EALF,EAKEA,OACAlB,EANF,EAMEA,SACAwC,EAPF,EAOEA,WACAC,EARF,EAQEA,OAEMC,EAAwB3O,EAAAA,QAAAA,sBAAAA,MAVhC,EAW0BwD,EAAAA,cACtBqI,EACA7H,EACA,EACAyK,EAAa,CAACA,GAAc,IAJxB5H,EAXR,EAWQA,MAAON,EAXf,EAWeA,OAMbM,EAAMlF,SAAQ,SAACiG,GACb8E,EAAUkC,UACRhH,EAAKpD,SAAS+H,UACd3E,EAAKf,QACLe,EAAKpD,SAASvB,aAGTqB,EAAI,EAAGA,EAAIN,EAAQK,MAAOC,IACjCoI,EAAUmC,WAAW7K,EAAQvB,IAAI6B,IAzBrC,IA2BMmK,EA3BN,wBA4BUK,EAAY9O,EAAAA,QAAAA,UAAAA,MACZ+O,EAAgBrC,EACnBsC,eAAeP,EAAW5H,SAC1BpG,WACHqO,EAAUnF,IAAI+E,EAAOK,IACrBrC,EAAUuC,cACRjP,EAAAA,QAAAA,UAAAA,WAAoC8O,EAAUpJ,aAEhDgH,EAAUwC,gBACRlP,EAAAA,QAAAA,WAAAA,WAAqCmN,EAAOzH,aAE9CgH,EAAUyC,mBAAmB1F,KAvCjC,UAwC8BnG,OAAO8L,QAAQC,gBAxC7C,cAwCUC,EAxCV,OAwC8DzO,KAAI,SAAC+G,GAAD,OAC5D5H,EAAAA,QAAAA,yBAAAA,WAAmDI,EAAQwH,QAE9C1F,QAAU,GA3C7B,uBA2CsC,IAAIiC,MAAM,iBA3ChD,QA4CIjE,KAAKmO,cAAc3B,EAAW4C,GAE9BX,EAAsBQ,mBAAmB1F,KACzCkF,EAAsBO,gBAAgB/B,GACtCwB,EAAsBM,cAAcH,GAhDxC,WAmDM7C,IACFsD,EAAWvP,EAAAA,QAAAA,cAAAA,MACLwP,EAAkBxP,EAAAA,QAAAA,2BAAAA,MACxByP,OAAOpK,KAAK4G,GAAUtK,SAAQ,SAACwK,GAC7BsD,OAAOpK,KAAK4G,EAASE,IAAQjK,OAAS,GACpCsN,EAAgBzN,OACd/B,EAAAA,QAAAA,OAAAA,SAA+BmM,GAC/BnM,EAAAA,QAAAA,6BACE0P,KAAKC,UAAU1D,EAASE,IACxB,OAIRoD,EAASK,aAAaJ,GACtB9C,EAAUmD,mBAAmBN,KAGzBO,EAAoBvJ,EAAOpB,eAKJ,EAA3BoB,EAAOb,WAAWxD,OAAahC,KAAKqD,mBAAmBwJ,aAEjDgD,EAAgB/P,EAAAA,QAAAA,MAAAA,IACpBA,EAAAA,QAAAA,OAAAA,SAA+B,MAG3BgQ,EAAqBhQ,EAAAA,QAAAA,WAAAA,MACrBiQ,EAAWH,EAAkBzK,OACjB,WAChB,IAAK,IAAIE,EAAI,EAAGA,EAAIuK,EAAkBzL,MAAOkB,IAAK,CAKhD,IAJA,IAAM3D,EAASqO,EAASxN,IAAI8C,GACtB1D,EAAeiO,EAAkBrN,IAAIb,GACrC6L,EAAa5L,EAAawD,OAC1BnE,EAASlB,EAAAA,QAAAA,OAAAA,MACN0N,EAAI,EAAGA,EAAID,EAAWpJ,MAAOqJ,IAAK,CACzC,IAAMC,EAAcF,EAAWhL,IAAIiL,GAC7B1L,EAAWH,EAAaY,IAAIkL,GAClCzM,EAAOa,OAAO4L,EAAa3L,GAE3B,IAAMkO,EAAmBlQ,EAAAA,QAAAA,WAAAA,WACvBgQ,EAAmBtK,YAErBwK,EAAiBnO,OAAOH,EAAQV,GAChC,IAAMiP,EAAanQ,EAAAA,QAAAA,MAAAA,IACjBA,EAAAA,QAAAA,OAAAA,SAA+B,MAGjC,GADAmQ,EAAWhO,eAAe+N,GAEO,EAA/BC,EAAWzK,WAAWxD,QACtB,EAAKqB,mBAAmBwJ,WAGxB,YADAiD,EAAmBjO,OAAOH,EAAQV,GAItC8O,EAAmBjO,OAAOH,EAAQV,IAGtCkP,GACAL,EAAc5N,eAAe6N,GACvBpJ,EAAS5G,EAAAA,QAAAA,iBACb+P,EACA/P,EAAAA,QAAAA,OAAAA,SAA+BE,KAAKqD,mBAAmBqJ,UAEzDmD,EAAc7B,SAAStH,GAEvB8F,EAAUmC,WACR7O,EAAAA,QAAAA,kBAAAA,IACEwO,EAAcJ,aACd2B,KAKNrD,EAAU2D,qBAAqB7B,EAAcJ,cACvCkC,EAAS5D,EAAU6D,QACnBC,EAAKxQ,EAAAA,QAAAA,YAAAA,IACTsQ,EACAtQ,EAAAA,QAAAA,sBAAAA,WACE2O,EAAsBjJ,YAExB6J,GAEIkB,EAA8B,EAAvBD,EAAG9K,WAAWxD,OAC3BwO,QAAQC,IAAIF,KACRA,EAAOvQ,KAAKqD,mBAAmBM,WA1IrC,uBA2IU,IAAIM,MAAM,oBA3IpB,yBA4I8Bb,OAAO8L,QAAQwB,OACzCrQ,EAAMiQ,EAAG9K,aACT,GA9IJ,eA4IMmL,EA5IN,OAgJEA,EAAkB7Q,EAAAA,QAAAA,sBAAAA,WAChBI,EAAQyQ,IAEVlC,EAAsBmC,UAAUD,EAAgBE,SAC1CC,EAAWhR,EAAAA,QAAAA,YAAAA,IACfwQ,EAAGrF,OACHwD,EACA6B,EAAGS,kBAGLP,QAAQC,IAAI,eAAgBK,EAAStL,WAAWxD,QA1JlD,UA4JuBoB,OAAO8L,QAAQ8B,SAAS3Q,EAAMyQ,EAAStL,aA5J9D,eA4JQyL,EA5JR,yBA6JSA,GA7JT,oGAAM5C,GAkKR,EACE6C,YAAA,SAAYC,EAAgB9E,EAASvI,GACnC,GAEI,GADFqN,EAAe1K,QAAQ3G,EAAAA,QAAAA,OAAAA,SAA+B,eAEiB,GAAvEqR,EAAe1K,QAAQ3G,EAAAA,QAAAA,OAAAA,SAA+B,cACtD,CACA,MAAoC,CAClCgD,EAAmBqO,EAAgBnR,KAAKmN,aAAaiE,OAAOC,MAC5DvO,EAAmBqO,EAAgBnR,KAAKmN,aAAamE,OAAOC,KAC5DzO,EAAmBqO,EAAgBnR,KAAKmN,aAAaqE,WAHhDC,EAAP,KAAgBC,EAAhB,KAAyBC,EAAzB,KAME3R,KAAK0K,kBAAkBgB,aACvB1L,KAAKmN,aAAaiE,OAAO/E,QAAQX,YAEjC5H,EAAQ2F,IACNzJ,KAAK8N,aACH9N,KAAKmN,aAAaiE,OAAO/E,QACzBvM,EAAAA,QAAAA,MAAAA,IAAyB2R,EAAQvL,YAAYyL,OAIjD7N,EAAQ2F,IACNzJ,KAAK8N,aACH9N,KAAKmN,aAAaiE,OAAO/E,QACzBvM,EAAAA,QAAAA,MAAAA,IAAyB2R,KAG7B3N,EAAQ2F,IACNzJ,KAAK8N,aACH9N,KAAK0K,kBACL5K,EAAAA,QAAAA,MAAAA,IAAyB6R,MAK/B7N,EAAQ2F,IACNzJ,KAAK8N,aACH9N,KAAKmN,aAAamE,OAAOjF,QACzBvM,EAAAA,QAAAA,MAAAA,IAAyB4R,KAI7B5N,EAAQ2F,IACNzJ,KAAK8N,aACHzB,EACAvM,EAAAA,QAAAA,MAAAA,IACEqR,EACG7K,YAAYmL,GACZnL,YAAYoL,GACZpL,YAAYqL,UAIhB,CACL,IAAMF,EAAU3O,EACdqO,EACAnR,KAAKmN,aAAaiE,OAAOQ,MAE3B9N,EAAQ2F,IACNzJ,KAAK8N,aACH9N,KAAKmN,aAAaiE,OAAO/E,QACzBvM,EAAAA,QAAAA,MAAAA,IAAyB2R,KAG7B3N,EAAQ2F,IACNzJ,KAAK8N,aACHzB,EACAvM,EAAAA,QAAAA,MAAAA,IAAyBqR,EAAe7K,YAAYmL,QAI3D,EAEK1R,KAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,oGACQD,EAAAA,OADR,uBAEkBE,KAAK8K,kBAAL,6BAFlB,OAEQ9H,EAFR,OAiBEhD,KAAKqD,mBAAqB,CACxBoJ,UAAW,CACThJ,QAAST,EAAE6O,UAAUtR,WACrBmD,QAASV,EAAE8O,UAAUvR,YAEvBmM,QAAS,UACTC,YAAa,YACbC,WAAY,UACZC,WAAY,OACZlJ,UAAW,MACXmJ,SAAU,MACVC,UAAW,QAGb/M,KAAKmN,aAAe,CAClB4E,gBACE,2DACF3E,UAAW,2DACX4E,eAAgB,WAChBpE,kBAAmB,cACnBwD,OAAQ,CACN/E,QAASvM,EAAAA,QAAAA,QAAAA,YACP,2GAEF8R,KAAM9R,EAAAA,QAAAA,OAAAA,SAA+B,OACrCuR,KAAMvR,EAAAA,QAAAA,OAAAA,SAA+B,QAEvCwR,OAAQ,CACNjF,QAASvM,EAAAA,QAAAA,QAAAA,YACP,2GAEFyR,IAAKzR,EAAAA,QAAAA,OAAAA,SAA+B,SAEtC0R,SAAU1R,EAAAA,QAAAA,OAAAA,SAA+B,QACzCmS,SAAUnS,EAAAA,QAAAA,OAAAA,SAA+B,YACzCoS,QAASpS,EAAAA,QAAAA,OAAAA,SAA+B,UAE1CE,KAAK0K,kBAAoB5K,EAAAA,QAAAA,QAAAA,YACvBE,KAAK0K,mBAGPpH,EAAAA,sBACEtD,KAAKqD,mBAAmBqJ,QACxB1M,KAAKqD,mBAAmBoJ,UAAUhJ,QAClCzD,KAAKqD,mBAAmBoJ,UAAU/I,QAClC1D,KAAKqD,mBAAmBM,UAAUpD,YA9DtC,kGAAMR,GAsER,EACQoS,SAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAezP,GAAf,kGAC0B1C,KAAKwL,QAC3BxL,KAAKmN,aAAa4E,gBAClB/R,KAAKmN,aAAa6E,eAClBtP,EAAMnC,YAJV,UAM2B,KALnB6R,EADR,QAMgBpQ,OANhB,oBAQyD,IAD/Cd,EAAWgB,EAAgBkQ,EAAU,GAAGjQ,OAAOQ,iBACxC8D,QAAQzG,KAAKmN,aAAa8E,UAR3C,yCAQmE,MARnE,iDASgBG,EAAU,GAT1B,CAS8BlR,SAAUA,EAASwH,YATjD,UAW2B,IAArB0J,EAAUpQ,QAA0B,MAATU,GAA0B,MAATA,EAXlD,oBAYUiJ,EAAQyG,EACXzR,KAAI,SAAC+G,GACJ,IAAMxG,EAAWgB,EAAgBwF,EAAKvF,OAAOQ,gBAC7C,OAAqD,GAAjDzB,EAASuF,QAAQ,EAAK0G,aAAa8E,UAAwB,KACxD,OAAP,UAAYvK,EAAZ,CAAkBxG,SAAUA,EAASwH,cAEtCnH,QAAO,SAACmG,GAAD,OAAkB,MAARA,OAGhBiE,EAAM3J,QAAU,GArBxB,0CAqBkC,MArBlC,aAsBQ2J,EAAM3J,OAAS,GAtBvB,0CAsBiC2J,EAAM,IAtBvC,iCAuBWA,GAvBX,iCA0BS,MA1BT,oGAAMwG,GAiCR,EACQE,OAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAa3P,GAAb,yFACwB1C,KAAKwL,QACzBxL,KAAKmN,aAAaC,UAClBpN,KAAKmN,aAAaS,kBAClBlL,EAAMnC,YAJV,UAMyB,KALjB+R,EADR,QAMctQ,OANd,yCAMmC,MANnC,cAOQd,EAAWoR,EAAQ,GAAG5K,KAAKpD,SAASvB,SAAS8C,OAAO6C,SAP5D,mCAQc4J,EAAQ,GARtB,CAQ0BpR,SAAAA,KAR1B,mGAAMmR,GAeR,EACQE,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAUD,EAASE,GAAnB,+GACyDxS,KAAKuM,SAD9D,uBACUC,EADV,EACUA,UAAWS,EADrB,EACqBA,OAAQlB,EAD7B,EAC6BA,SAAUjI,EADvC,EACuCA,QAC/BpB,EAAQ4P,EAAQ5P,MAFxB,KAIwB5C,EAAAA,QAAAA,YAJxB,KAKIA,EAAAA,QAAAA,QALJ,KAMMI,EANN,UAMqBkD,OAAO8L,QAAQuD,mBANpC,2BAMwD,GANxD,8BAK2BC,WAL3B,gBAIQC,EAJR,KAImDC,aAJnD,0BAUuBxP,OAAO8L,QAAQ2D,WAVtC,WAUQlH,EAVR,OAUkDhL,KAAI,SAAC+G,GAAD,OAClD5H,EAAAA,QAAAA,yBAAAA,WAAmDI,EAAQwH,OAE7DuF,EAAOxD,IAAI6I,EAAQnQ,OAEb2Q,EAAWhJ,GAAI,CACnBtH,WAAYnC,EAAMsS,EAAcI,eAAeC,aAAaxN,YAC5D9C,MAAAA,IAGIuQ,EAAYX,EAAQnQ,MAAME,wBAAwB6Q,MAAMC,SACxDpR,EAAQuQ,EAAQ5K,KAAKpD,SAASvB,SAChCkQ,IAAcrJ,GAAWC,SAtB/B,qBA0BY,GAFN/J,EAAAA,QAAAA,OAAAA,SAA+B0S,GAAW/L,QACxCzG,KAAKmN,aAAa8E,UAzB1B,uBA4BY,IAAIhO,MAAM,oBA5BtB,QA6BQjE,KAAKkN,gBAAgBnL,GAAS,GAChC+B,EAAQ2F,IACNzJ,KAAK8N,aACHpE,IACA3I,EAAc,CACZ,CAAEM,KAAM,WAAYS,SAAU0Q,GAC9B,CACEnR,KACErB,KAAKmN,aAAaC,UAClBtM,EAAUd,KAAKmN,aAAaS,kBAAoBlL,GAClDZ,SAAU,OAGd,CACEK,MAAO2Q,EACP1I,MAAO,EACPgC,kBAAmBuG,EACnB5G,SAAAA,KAINkB,EAAOxD,IAAIqJ,GACXhP,EAAQ2F,IACNzJ,KAAK8N,aACHpE,IACA1J,KAAKqN,mBAAmBiF,EAAQ5K,KAAKpD,SAASvB,SAAUL,GACxD,CACEP,MAAOwH,KACPS,MAAO,EACP2B,SAAAA,KAINkB,EAAOxD,IAAIE,QAEX7F,EAAQ2F,IACNzJ,KAAK8N,aACHpE,IACA3I,EAAc,CACZ,CAAEM,KAAM,WAAYS,SAAU0Q,GAC9B,CACEnR,KACErB,KAAKmN,aAAaC,UAClBtM,EAAUd,KAAKmN,aAAaS,kBAAoBlL,GAClDZ,SAAU,OAGd,CACEK,MAAO2Q,EACP1I,MAAO,EACPgC,kBAAmBuG,EACnB5G,SAAAA,KAINkB,EAAOxD,IAAIqJ,IApFjB,2BAsFaG,GAAarJ,GAAWI,IAtFrC,qBA0FY,GAFNlK,EAAAA,QAAAA,OAAAA,SAA+B0S,GAAW/L,QACxCzG,KAAKmN,aAAa+E,QAAQhM,YAAYnE,EAAM8D,SAzFpD,uBA4FY,IAAI5B,MAAM,oBA5FtB,QA6FIH,EAAQ2F,IACNzJ,KAAK8N,aACHpE,IACA3I,EAAc,CACZ,CAAEM,KAAM,WAAYS,SAAU0Q,GAC9B,CACEnR,KACErB,KAAKmN,aAAaC,UAClBtM,EAAUd,KAAKmN,aAAaS,kBAAoBlL,GAClDZ,SAAU,OAGd,CACEK,MAAO2Q,EACP1I,MAAO,EACPgC,kBAAmBuG,EACnB5G,SAAAA,KAINkB,EAAOxD,IAAIqJ,GAETR,EAAQlG,kBAAkBV,aAC1BiH,EAAczE,aAAaxC,YAG3B5H,EAAQ2F,IACNzJ,KAAK8N,aACHwE,EAAQlG,kBACRtM,EAAAA,QAAAA,MAAAA,IAAyBiC,EAAM8D,YAI7BuN,EAAkBtT,EAAAA,QAAAA,iBAAAA,OACR2J,IAAIkJ,EAAcI,eAAeC,cACjDxG,EAAU6G,qBAAqBD,IAhIrC,yBAoIuBpT,KAAKqO,WAAW,CACnC7B,UAAAA,EACA8B,cAAeqE,EACfhH,MAAAA,EACA7H,QAAAA,EACAmJ,OAAAA,EACAlB,SAAAA,EACAwC,WAAY+D,EAAQ5K,KACpB8G,OAAQjE,KA5IZ,eAoIQ0G,EApIR,yBA8ISA,GA9IT,sGAAMsB,GAqJR,EACQe,KAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAWhB,GAAX,6GACyDtS,KAAKuM,SAD9D,uBACUC,EADV,EACUA,UAAWS,EADrB,EACqBA,OAAQlB,EAD7B,EAC6BA,SAAUjI,EADvC,EACuCA,QAC/BpB,EAAQ4P,EAAQ5P,MAFxB,KAIwB5C,EAAAA,QAAAA,YAJxB,KAKIA,EAAAA,QAAAA,QALJ,KAMMI,EANN,UAMqBkD,OAAO8L,QAAQuD,mBANpC,2BAMwD,GANxD,8BAK2BC,WAL3B,gBAIQC,EAJR,KAImDC,aAJnD,0BAUuBxP,OAAO8L,QAAQ2D,WAVtC,WAUQlH,EAVR,OAUkDhL,KAAI,SAAC+G,GAAD,OAClD5H,EAAAA,QAAAA,yBAAAA,WAAmDI,EAAQwH,OAE7DuF,EAAOxD,IAAI6I,EAAQnQ,OAEb8Q,EAAYX,EAAQnQ,MAAME,wBAAwB6Q,MAAMC,SACxDpR,EAAQuQ,EAAQ5K,KAAKpD,SAASvB,SAChCkQ,IAAcrJ,GAAWI,IAjB/B,uBAiB0C,IAAI/F,MAAM,yBAjBpD,eAkBEH,EAAQ2F,IACNzJ,KAAK8N,aACHpE,IACA3I,EAAc,CACZ,CACEM,KACErB,KAAKmN,aAAaC,UAClBtM,EAAUd,KAAKmN,aAAaS,kBAAoBlL,GAClDZ,SAAU,OAGd,CACEK,MAAOwH,KACPS,MAAO,EACP2B,SAAAA,KAINkB,EAAOxD,IAAIE,MACX3J,KAAKkR,YAAYnP,EAAM8D,OAAQ8M,EAAczE,aAAcpK,GAC3DA,EAAQ2F,IACNzJ,KAAK8N,aACHwE,EAAQlG,kBACRrL,EAAc,CACZ,CACEM,KACErB,KAAKmN,aAAa4E,gBAClBjR,EAAUd,KAAKmN,aAAa6E,eAAiBtP,GAC/CZ,SAAU,UAMZsR,EAAkBtT,EAAAA,QAAAA,iBAAAA,OACR2J,IAAIkJ,EAAcI,eAAeC,cACjDxG,EAAU6G,qBAAqBD,GAtDjC,UAwDuBpT,KAAKqO,WAAW,CACnC7B,UAAAA,EACA8B,cAAeqE,EACfhH,MAAAA,EACA7H,QAAAA,EACAmJ,OAAAA,EACAlB,SAAAA,EACAwC,WAAY+D,EAAQ5K,KACpB8G,OAAQlE,KAhEZ,eAwDQ2G,EAxDR,yBAkESA,GAlET,oGAAMqC,GA0ER,EACQC,MAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAY7Q,EAAOC,GAAnB,uGACyD3C,KAAKuM,SAD9D,mBACUC,EADV,EACUA,UAAWS,EADrB,EACqBA,OAAQlB,EAD7B,EAC6BA,SAAUjI,EADvC,EACuCA,QACrCpB,EAAQA,EAAMnC,YAIN,GAFNT,EAAAA,QAAAA,OAAAA,SAA+B6C,GAAiB8D,QAC9CzG,KAAKmN,aAAa8E,UALxB,uBAQU,IAAIhO,MAAM,oBARpB,oBASwBnE,EAAAA,QAAAA,YATxB,KAUIA,EAAAA,QAAAA,QAVJ,KAWMI,EAXN,UAWqBkD,OAAO8L,QAAQuD,mBAXpC,2BAWwD,GAXxD,8BAU2BC,WAV3B,gBASQC,EATR,KASmDC,aATnD,0BAeuBxP,OAAO8L,QAAQ2D,WAftC,eAeQlH,EAfR,OAekDhL,KAAI,SAAC+G,GAAD,OAClD5H,EAAAA,QAAAA,yBAAAA,WAAmDI,EAAQwH,OAEvD8L,EAAavJ,GAAM,CACvBzH,WAAYnC,EAAMsS,EAAcI,eAAeC,aAAaxN,YAC5D9C,MAAAA,EACAC,gBAAAA,IAEFmB,EAAQ2F,IACNzJ,KAAK8N,aACHpE,IACA3I,EAAc,CACZ,CACEM,KACErB,KAAKmN,aAAa4E,gBAClBjR,EAAUd,KAAKmN,aAAa6E,eAAiBtP,GAC/CZ,SAAU,OAGd,CACEK,MAAOqR,EACPpJ,MAAO,EACPgC,kBAAmBuG,EACnB5G,SAAAA,KAINkB,EAAOxD,IAAI+J,GA1Cb,UA4CuBxT,KAAKqO,WAAW,CACnC7B,UAAAA,EACA8B,cAAeqE,EACfhH,MAAAA,EACA7H,QAAAA,EACAmJ,OAAAA,EACAlB,SAAAA,IAlDJ,eA4CQkF,EA5CR,yBAoDSA,GApDT,sGAAMsC,GA0DR,EACQE,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAUrB,GAAV,6GAC+CpS,KAAKuM,SADpD,uBACUC,EADV,EACUA,UAAWS,EADrB,EACqBA,OAAQnJ,EAD7B,EAC6BA,QAD7B,KAEwBhE,EAAAA,QAAAA,YAFxB,KAGIA,EAAAA,QAAAA,QAHJ,KAIMI,EAJN,UAIqBkD,OAAO8L,QAAQuD,mBAJpC,2BAIwD,GAJxD,8BAG2BC,WAH3B,gBAEQC,EAFR,KAEmDC,aAFnD,0BAQuBxP,OAAO8L,QAAQ2D,WARtC,WAQQlH,EARR,OAQkDhL,KAAI,SAAC+G,GAAD,OAClD5H,EAAAA,QAAAA,yBAAAA,WAAmDI,EAAQwH,OAE7DuF,EAAOxD,IAAI2I,EAAUjQ,OAEf8Q,EAAYb,EAAUjQ,MAAME,wBAAwB6Q,MAAMC,SAC1D/Q,EAAeF,EAAgBkQ,EAAUjQ,OACzCJ,EAAQqQ,EAAU1K,KAAKpD,SAASvB,SAChCoO,EAAiB/O,EAAaO,gBAChCsQ,IAAcrJ,GAAWM,MAjB/B,uBAkBU,IAAIjG,MAAM,2BAlBpB,eAmBEjE,KAAKkR,YAAYC,EAAgBiB,EAAUhG,kBAAmBtI,GAE9DA,EAAQ2F,IAAIzJ,KAAK8N,aAAa6E,EAAczE,aAAcnM,KAEpDqR,EAAkBtT,EAAAA,QAAAA,iBAAAA,OACR2J,IAAIkJ,EAAcI,eAAeC,cACjDxG,EAAU6G,qBAAqBD,GAzBjC,UA2BuBpT,KAAKqO,WAAW,CACnC7B,UAAAA,EACA8B,cAAeqE,EACfhH,MAAAA,EACA7H,QAAAA,EACAmJ,OAAAA,EACAsB,WAAY6D,EAAU1K,KACtB8G,OAAQrE,KAlCZ,eA2BQ8G,EA3BR,yBAoCSA,GApCT,oGAAMwC,GA0CR,EACQC,YAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAkBtB,GAAlB,uGAC+CpS,KAAKuM,SADpD,uBACUC,EADV,EACUA,UAAWS,EADrB,EACqBA,OAAQnJ,EAD7B,EAC6BA,QAD7B,KAGwBhE,EAAAA,QAAAA,YAHxB,KAIIA,EAAAA,QAAAA,QAJJ,KAKMI,EALN,UAKqBkD,OAAO8L,QAAQuD,mBALpC,2BAKwD,GALxD,8BAI2BC,WAJ3B,gBAGQC,EAHR,KAGmDC,aAHnD,0BASuBxP,OAAO8L,QAAQ2D,WATtC,WASQlH,EATR,OASkDhL,KAAI,SAAC+G,GAAD,OAClD5H,EAAAA,QAAAA,yBAAAA,WAAmDI,EAAQwH,OAE7DuF,EAAOxD,IAAI2I,EAAUjQ,OAEf8Q,EAAYb,EAAUjQ,MAAME,wBAAwB6Q,MAAMC,SAClDf,EAAU1K,KAAKpD,SAASvB,SAClCkQ,IAAcrJ,GAAWM,MAhB/B,uBAiBU,IAAIjG,MAAM,2BAjBpB,eAkBQmP,EAAkBtT,EAAAA,QAAAA,iBAAAA,OACR2J,IAAIvH,EAAgBkQ,EAAUjQ,OAAOK,YACrDgK,EAAU6G,qBAAqBD,GApBjC,UAsBuBpT,KAAKqO,WAAW,CACnC7B,UAAAA,EACA8B,cAAeqE,EACfhH,MAAAA,EACA7H,QAAAA,EACAmJ,OAAAA,EACAsB,WAAY6D,EAAU1K,KACtB8G,OAAQhE,KA7BZ,eAsBQyG,EAtBR,yBA+BSA,GA/BT,oGAAMyC,GAqCR,EACQC,UAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAgBrB,GAAhB,2GACyDtS,KAAKuM,SAD9D,uBACUC,EADV,EACUA,UAAWS,EADrB,EACqBA,OAAQlB,EAD7B,EAC6BA,SAAUjI,EADvC,EACuCA,QAC/BpB,EAAQ4P,EAAQ5P,MAFxB,KAGwB5C,EAAAA,QAAAA,YAHxB,KAIIA,EAAAA,QAAAA,QAJJ,KAKMI,EALN,UAKqBkD,OAAO8L,QAAQuD,mBALpC,2BAKwD,GALxD,8BAI2BC,WAJ3B,gBAGQC,EAHR,KAGmDC,aAHnD,0BASuBxP,OAAO8L,QAAQ2D,WATtC,WASQlH,EATR,OASkDhL,KAAI,SAAC+G,GAAD,OAClD5H,EAAAA,QAAAA,yBAAAA,WAAmDI,EAAQwH,OAE7DuF,EAAOxD,IAAI6I,EAAQnQ,OAEb8Q,EAAYX,EAAQnQ,MAAME,wBAAwB6Q,MAAMC,SAChDb,EAAQ5K,KAAKpD,SAASvB,SAChCkQ,IAAcrJ,GAAWI,IAhB/B,uBAgB0C,IAAI/F,MAAM,yBAhBpD,eAiBEH,EAAQ2F,IACNzJ,KAAK8N,aACHpE,IACA3I,EAAc,CACZ,CACEM,KACErB,KAAKmN,aAAaC,UAClBtM,EAAUd,KAAKmN,aAAaS,kBAAoBlL,GAClDZ,SAAU,OAGd,CACEK,MAAOwH,KACPS,MAAO,EACP2B,SAAAA,KAINkB,EAAOxD,IAAIE,OACLyJ,EAAkBtT,EAAAA,QAAAA,iBAAAA,OACR2J,IAAIvH,EAAgBoQ,EAAQnQ,OAAOK,YACnDgK,EAAU6G,qBAAqBD,GAtCjC,UAwCuBpT,KAAKqO,WAAW,CACnC7B,UAAAA,EACA8B,cAAeqE,EACfhH,MAAAA,EACA7H,QAAAA,EACAmJ,OAAAA,EACAlB,SAAAA,EACAwC,WAAY+D,EAAQ5K,KACpB8G,OAAQhE,KAhDZ,eAwCQyG,EAxCR,yBAkDSA,GAlDT,oGAAM0C,GAyDR,EACQC,kBAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAwB3C,GAAxB,qGACS,IAAIrF,SAAQ,SAACN,EAAKuI,GACvB,IAAMC,EAAeC,aAAW,iBAAC,oGACL,EAAKjJ,kBAAL,QAA+BmG,GAD1B,YACzB+C,EADyB,SAEXA,EAAYC,MAFD,uBAG7BC,cAAcJ,GACdxI,EAAI2F,GAJyB,8DAO9B,SATP,8FAAM2C,GAAN,EAx8BInJ,GAs9BN,M,uBG5oCA,GAAe,IAA0B,mD,YCoC5BpK,GAAQ,SAACC,GAAD,OAAWF,OAAO4M,KAAK1M,GAAOC,SAAS,QAEtD4T,GAAY,iBAAwB,oBAAX/Q,QA8wBzBgR,GAAWC,EAAAA,QAAAA,KAAAA,WAAH,8DAAGA,CAAH,oEAQRC,GAAY,SAACC,GACjB,OACE,gBAAC,KAAD,CACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGlB,gBAACP,GAAD,CAAUQ,QAAS,kBAAML,EAAMK,YAC7B,uBACEJ,MAAO,CACLC,QAAS,QACTI,OAAQ,GACRC,gBAAiB,UACjBC,QAAS,UACTC,aAAc,GACdC,SAAU,GACVC,MAAO,QACPC,WAAY,IACZC,UAAW,SACXC,cAAe,WAGhBd,EAAMe,aAOjB,GAnzBiB,SAAC,GAAmC,IAAD,EAAjBC,EAAiB,EAAhCC,YAAeD,SAC3BE,GAAUC,EAAAA,EAAAA,MACVC,GAAQC,EAAAA,EAAAA,MACd,EAA0BC,EAAAA,SAAe,IAAlCC,EAAP,KAAcC,EAAd,KACA,GAAoCC,EAAAA,EAAAA,MAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAClBC,EAAWP,EAAAA,SACjB,EAA8CA,EAAAA,UAAe,GAAtDQ,EAAP,KAAwBC,EAAxB,KACA,EAA8BT,EAAAA,SAAe,CAC3CtD,IAAK,CAAED,QAAS,KAAMpR,SAAU,KAAMqV,IAAK,KAAMT,OAAO,GACxDvC,MAAO,CAAEnB,UAAW,KAAMlR,SAAU,KAAMqV,IAAK,KAAMT,OAAO,GAC5DU,SAAU,CAAEtV,SAAU,KAAMqV,IAAK,QAH5BE,EAAP,KAAgBC,EAAhB,KAKA,EAA0Cb,EAAAA,SAAe,CACvDlC,WAAW,EACXpB,KAAK,EACLkB,KAAK,EACLF,OAAO,EACPG,aAAa,EACbJ,MAAM,IANDqD,EAAP,KAAsBC,EAAtB,KAQMC,GAAYC,EAAAA,EAAAA,gBAAc,SAACC,GAAD,OAAWA,EAAMC,WAAWH,aACtDI,EAASpB,EAAAA,SAMfA,EAAAA,WAAgB,WACdqB,MACC,IACH,IAAMC,EAActB,EAAAA,QAAa,GACjCA,EAAAA,WAAgB,WACVsB,EAAYC,QACdD,EAAYC,SAAU,EAGxBC,MACC,CAACR,IAEJ,IAAMS,EAAgB,mCAAG,WAAOrG,EAAP,iFAAiBsG,GAAjB,aAAoC,GAApC,GAAiBA,KAAMrW,EAAvB,EAAuBA,SACzC+P,EADkB,wDAEvBuG,EAAAA,EAAAA,IAAwB7B,GACpB4B,GACFrM,MAAM,qCAAsC,CAC1CE,OAAQ,OACRJ,QAAS,CACPyM,cAAe,iBACf,eAAgB,oBAElBxM,KAAMuE,KAAKC,UAAU,CAAEiI,GAAInC,EAASmC,GAAGnX,WAAYgX,KAAAA,EAAMrW,SAAAA,MAExDmK,KAAKmF,QAAQC,KACbkH,MAAMnH,QAAQC,KAbI,SAejBwG,EAAOG,QAAQxD,kBAAkB3C,GAfhB,cAgBvB0E,EAAMiC,YACNC,EAAAA,EAAAA,IAAwBlC,EAAO1E,GAjBR,UAkBjB,IAAIrF,SAAQ,SAACN,EAAKuI,GAAN,OAAciE,YAAW,kBAAMxM,MAAO,QAlBjC,QAmBvB+L,IAnBuB,4CAAH,wDAsBhBH,EAAU,mCAAG,qFACjBD,EAAOG,QAAU,IAAIW,GACnB,CACEpN,KAAM,+CACNC,UAAWoN,KAAAA,YAEb,2GANe,SAQXf,EAAOG,QAAQrX,OARJ,OASjBsX,IATiB,2CAAH,qDAYVA,EAAgB,mCAAG,6GACvBf,GAAmB,GACnBP,EAAS,IACHkC,EArDO,2DAqDU5X,GAAM,WAAWkV,EAASmC,IAH1B,SAIDxM,MAAM,uDAC6B+M,EAD9B,aAEzB,CAAEjN,QAAS,CAAEG,WAAY6M,KAAAA,cACzB3M,MAAK,SAACC,GAAD,OAASA,EAAIC,UAPG,cAInB2M,EAJmB,gBAQChN,MAAM,+EAG3BG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASA,EAAI4D,QAAJ,OAZM,cAQjBiJ,EARiB,iBAaAjN,MAAM,6CACkBqK,EAASmC,IAErDrM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASA,EAAIkL,YAjBE,eAajBA,EAbiB,iBAmBDS,EAAOG,QAAQ/E,OAAOkD,EAASmC,IAnB9B,eAmBjBpF,EAnBiB,iBAoBD2E,EAAOG,QAAQjF,SAASoD,EAASmC,IApBhC,WAoBnBtF,EApBmB,QAsBnBgG,MAAMC,QAAQjG,GAtBK,oBAwBC,GAApBA,EAAUpQ,QACM,MAAfuT,EAASmC,IAA6B,MAAfnC,EAASmC,GAzBd,kBA2BbY,EAAYlG,EAAUjR,MAC1B,SAACuG,GAAD,OAAUA,EAAK0E,kBAAkBV,aAAemL,MAGhDzE,EAAYkG,GAENC,EAAanG,EAAU,GACvBoG,EAAapG,EAAU,GAE7B8F,EAAY,CACV,CAAEO,SAAUF,EAAWnM,kBAAkBV,aACzC,CAAEW,QAASkM,EAAWnM,kBAAkBV,cAOxC0G,EAJA+B,MACA/Q,OAAOD,OAAOoV,EAAWrX,UACvBkC,OAAOD,OAAOqV,EAAWtX,UAEfqX,EAEAC,GA/CG,8BAkDR,IAAIvU,MAAM,wBAlDF,SAoDjBwS,EAAU,CACdlE,IAAK,CAAED,QAAS,KAAMpR,SAAU,KAAMqV,IAAK,KAAMT,OAAO,GACxDvC,MAAO,CAAEnB,UAAW,KAAMlR,SAAU,KAAMqV,IAAK,KAAMT,OAAO,GAC5DU,SAAU,CAAEtV,SAAU,KAAMqV,IAAK,QAE3BhE,IAAID,QAAUA,EACtBmE,EAAQlD,MAAMnB,UAAYA,EAC1B5B,QAAQC,IAAI6B,GACZ9B,QAAQC,IAAI2B,GAE4B,eAApC/R,GAAMiS,EAAQnQ,MAAMqD,cAClB8M,EAAQlG,kBAAkBV,cAAgBmL,IAC5CJ,EAAQlE,IAAIuD,OAAQ,GACtBW,EAAQlE,IAAIrR,SAAWoR,EAAQpR,SAC/BuV,EAAQlE,IAAIgE,IAAOjE,EAAQpR,SAAR,SAAmB,GAAM,GAAKiX,EAA/B,SAA2C,GAAM,IAEjED,EAAU/W,MAAK,SAACkL,GAAD,OAAaA,EAAQA,SAAWwK,OACjDJ,EAAQlD,MAAMuC,OAAQ,GACpB1D,IACF8F,EAAYA,EAAUvX,KAAI,SAAC0L,GAAD,MAvH5B,8DAwHIA,EAAQA,QACJ,CAAEA,QAAS+F,EAAUhG,kBAAkBV,aACvCW,KAEF+F,EAAUhG,kBAAkBV,cAAgBmL,IAC9CJ,EAAQlD,MAAMuC,OAAQ,GACxBW,EAAQlD,MAAMrS,SAAWkR,EAAUlR,SACnCuV,EAAQlD,MAAMgD,IAAOnE,EAAUlR,SAAV,SAAqB,GAAM,GAAKiX,EAAjC,SAA6C,GAAM,IAGrE3B,IACFC,EAAQD,SAAStV,SAAWsV,EAC5BC,EAAQD,SAASD,IAAOC,EAAQ,SAAG,GAAM,GAAK2B,EAAvB,SAAmC,GAAM,IAK9DD,EAAUlW,OAAS,GAAKkW,EAAU,GAAG7L,SAAW6L,EAAU,GAAG7L,UAC/D6L,EAAY,CAACA,EAAU,KAGzBxB,EAAWD,GACXV,EAASmC,GACT5B,GAAmB,GA/FI,4CAAH,qDAkGtB,OACE,gCACE,gBAACoC,EAAA,EAAD,CACEC,aAAa,oCACbC,MAAO,yBAA2BrD,EAASmC,GAC3CmB,YAAW,aAAetD,EAASmC,GACnCoB,MAAOvD,EAASuD,QAElB,uBACEtE,MAAO,CACLuE,MAAO,OACPtE,QAAS,OACTC,WAAY,SACZsE,cAAe,SACfC,UAAW,IACXC,aAAc,MAGhB,uBACE1E,MAAO,CACL2E,SAAU,WACVC,cAAe,GACfL,MAAO,MACP/D,aAAc,GACdqE,gBAAgB,OAAQC,GAAT,IACfC,iBAAkB,YAClBC,eAAgB,QAChB/E,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBqE,cAAe,SACf9D,MAAO,UAGT,uBACEV,MAAO,CACLiF,OAAQ,GACRN,SAAU,WACVO,KAAM,GACNC,IAAK,GACLC,OAAQ,WAEVhF,QAAS,kBAAMsB,MAEf,gBAAC,MAAD,CAAQ3F,KAAM,MAGhB,gBAAC,KAAD,CACEsJ,IAAKtE,EACLU,OAAQA,EACRC,OAAQA,EACRC,QAASA,IAEX,gBAAC,KAAD,CACEzT,MAAO6S,EAASmC,GAChBoC,IAAK1D,EACLa,OAAQA,EAAOG,QACfX,QAASA,EACTsD,UAAWzC,IAGb,uBACE9C,MAAO,CACLuE,MAAQtD,EAAQuE,GAAW,IAAN,IACrBnF,OAASY,EAAQuE,GAAW,IAAN,IACtBhF,aAAc,MACdiE,WAAY,GACZC,cAAe,KAGjB,uBAAK1E,MAAO,CAAEuE,MAAO,OAAQI,SAAU,cACpB,MAAf5D,EAASmC,IAA6B,MAAfnC,EAASmC,KAChC,uBACEuC,IAAK1E,EAASuD,MACdtE,MAAO,CACL2E,SAAU,WACVO,KAAM,GACNC,KAAM,GACNpY,OAAQ,mBAEVwX,MAAM,SAGV,uBACEkB,IAAK1E,EAASuD,MACdtE,MAAO,CAAE2E,SAAU,YACnBJ,MAAM,WAIZ,gBAAC,KAAD,CAAKmB,EAAG,IACR,uBAAK1F,MAAO,CAAEW,WAAY,IAAKF,SAAU,KAAzC,aACaM,EAASmC,IAGtB,gBAACtD,GAAD,CAAUQ,QAAS,kBAAMuF,EAAAA,EAAAA,IAAS,kBAAkB5E,EAASgC,QAC1DhC,EAASgC,KADZ,eAIF,gBAAC,KAAD,CAAK2C,EAAG,KACS,MAAf3E,EAASmC,IAA6B,MAAfnC,EAASmC,KAChC,gCACE,uBACElD,MAAO,CACLW,WAAY,IACZV,QAAS,OACTE,eAAgB,SAChBD,WAAY,WAGd,uBAAKF,MAAO,CAAEyE,WAAY,IAA1B,SACA,gBAAC,KAAD,CAAKmB,EAAG,KACH,IACP,gBAAC,KAAD,CAAKF,EAAG,KAGXpE,EAAM9T,OAAS,EACd8T,EAAMnV,KAAI,SAAC0Z,EAAMjW,GAAP,OACR,uBACEkW,IAAKlW,EACLoQ,MAAO,CACL0E,aAAc,EACdqB,WAAY,EACZnB,cAAe,EACfoB,YAAa,GACb/F,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBM,SAAU,GACVwF,OAAQ,oBACRzF,aAAc,GACdE,MAAO,YAGT,4BACE,mCAAc,KAEhB,uBACEV,MAAO,CACLuE,MAAO,QACP2B,WAAY,SACZtF,UAAW,WAGb,gBAAC,IAAD,KACE,gBAAC,KAAD,CACEuF,WAAS,EACTzF,MAAM,aACNN,QAAS,SAAC1N,GACJ4O,IAAOqE,EAAAA,EAAAA,IAAS,oBAAoBE,EAAKhO,WAG9CgO,EAAKhO,eAOhB,gCACE,gBAAC,KAAD,CAAK6N,EAAG,IACR,gBAAC,KAAD,CAAKzF,QAAQ,OAAOC,WAAW,UAC7B,gBAAC,KAAD,CAAMQ,MAAM,WAAW0F,GAAG,KAA1B,SAEQ,IACR,gBAAC,IAAD,CAASrK,KAAK,KAAK2E,MAAM,aAK/B,gBAAC,KAAD,CAAKgF,EAAG,IACR,uBACE1F,MAAO,CACLuE,MAAO,OACPtE,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBwE,SAAU,aAGX9C,EACC,gBAAC,KAAD,CAAK5B,QAAQ,OAAOC,WAAW,UAC7B,gBAAC,KAAD,CAAMQ,MAAM,WAAW0F,GAAG,KAA1B,kBAEQ,IACR,gBAAC,IAAD,CAASrK,KAAK,KAAK2E,MAAM,YAG3B,gBAAC,KAAD,CACET,QAAQ,OACRC,WAAW,SACXC,eAAe,SACfqE,cAAc,UAEd,gBAAC,KAAD,CAAK5D,UAAU,UACb,uBACEZ,MAAO,CAAES,SAAU,GAAIE,WAAY,OAAQ+D,aAAc,IAD3D,aAKA,gBAAC2B,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQD,SAAStV,UACxCiU,WAAW,SACXrT,SAAU2U,EAAQD,SAAStV,UAAY,EACvC8Z,OAAO,MACPC,SAAU,IAEZ,gBAACJ,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQD,SAASD,KACxCtB,SAAU,GACVC,MAAM,UACNpT,SAAU2U,EAAQD,SAASD,KAAO,EAClCyE,OAAO,MACPC,SAAU,KAGd,gBAAC,KAAD,CAAKf,EAAG,IACR,gBAAC,KAAD,CAAKf,SAAS,YACZ,gBAAC,KAAD,CAAKA,SAAS,WAAWQ,IAAI,QAAQD,MAAO,IACzC,IACD,gBAAC,KAAD,CAAYE,OAAO,UAAUhF,QAASyC,MAG1C,gBAAC,KAAD,CAAK5C,QAAQ,OAAOC,WAAW,UAC5B+B,EAAQlD,MAAMuC,MACb,gCACE,gBAAC,KAAD,CACEiD,MAAOtD,EAAQuE,GAAK,QAAU,QAC9B5E,UAAU,SAEV,uBAAKZ,MAAO,CAAES,SAAU,KAAxB,kBACA,gBAAC4F,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlE,IAAIrR,UACnCiU,WAAW,SACXrT,SAAU2U,EAAQlE,IAAIrR,UAAY,EAClC8Z,OAAO,MACPC,SAAU,IAEZ,gBAACJ,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlE,IAAIgE,KACnCtB,SAAU,GACVC,MAAM,UACNpT,SAAU2U,EAAQlE,IAAIgE,KAAO,EAC7ByE,OAAO,MACPC,SAAU,KAGd,gBAAC,KAAD,CAAKb,EAAG,IACP3D,EAAQlE,IAAIuD,MACX,gBAAC,IAAD,CAAS7J,MAAM,aAAaiP,QAAQ,OAClC,gBAAC,KAAD,CACEC,WAAYxE,EAAchD,UAC1ByH,UAAWzE,EAAchD,UACzBiB,SAAO,iBAAE,uFACFiC,EADE,wDAEPD,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf1H,WAAW,OAJN,SAMcsD,EAAOG,QACzBzD,UAAU8C,EAAQlE,IAAID,SACtBqF,OAAM,SAACzQ,GAAD,OAAOoU,EAAAA,EAAAA,IAAkBpU,EAAGyO,MAR9B,OAMD1E,EANC,OASP2F,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf1H,WAAW,OAEb2D,EAAiBrG,GAbV,2CAeTiK,QAAQ,MACR3K,KAAK,KACL2E,MAAM,QACNqG,QAAQ,UACRC,YAAY,OAtBd,WA4BF,gBAAC,IAAD,CACEvP,MACEwK,EAAQlD,MAAMnB,WACdyE,GACEJ,EAAQlD,MAAMnB,UAAUhG,kBAAkBV,aAC5C,qBAEFwP,QAAQ,OAER,gBAAC,OAAD,GACEC,YACGJ,QAAQtE,EAAQlE,IAAIrR,WAAayV,EAAcrD,KAElD8H,UAAWzE,EAAcrD,KACzB4H,QAAQ,MACR3K,KAAK,KACLiL,YAAY,SACZzC,MAAM,MACN0C,QAAQ,YATV,QAUU,MAVV,QAWQ,MAXR,EAYE7G,SAZF,iBAYW,uFAEJiC,KACAJ,EAAQlD,MAAMnB,WACbyE,GACEJ,EAAQlD,MAAMnB,UAAUhG,kBAAkBV,aALzC,wDAQPkL,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf/H,MAAM,OAVD,SAYc2D,EAAOG,QACzB9D,KAAKmD,EAAQlE,IAAID,SACjBqF,OAAM,SAACzQ,GAAD,OAAOoU,EAAAA,EAAAA,IAAkBpU,EAAGyO,MAd9B,OAYD1E,EAZC,OAeP2F,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf/H,MAAM,OAERgE,EAAiBrG,EAAQ,CACvBsG,KAAM,OACNrW,SAAUuV,EAAQlE,IAAIrR,WArBjB,2CAZX,YAyCJ,gBAAC,KAAD,CAAKkZ,EAAG,IACR,gBAAC,KAAD,CACE3F,QAAQ,OACRuE,cAAc,SACdtE,WAAW,SACXC,eAAe,UAEd8B,EAAQlD,MAAMrS,UACfuV,EAAQlD,MAAMnB,WACdyE,GACEJ,EAAQlD,MAAMnB,UAAUhG,kBAAkBV,YAC1C,gBAAC,IAAD,CAASO,MAAM,eAAeiP,QAAQ,OACpC,gBAAC,KAAD,CACEC,WAAYxE,EAAcjD,YAC1B0H,UAAWzE,EAAcjD,YACzBkB,SAAO,iBAAE,uFACFiC,EADE,wDAEPD,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf3H,aAAa,OAJR,SAMcuD,EAAOG,QACzB1D,YAAY+C,EAAQlD,MAAMnB,WAC1BuF,OAAM,SAACzQ,GAAD,OAAOoU,EAAAA,EAAAA,IAAkBpU,EAAGyO,MAR9B,OAMD1E,EANC,OASP2F,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf3H,aAAa,OAEf4D,EAAiBrG,GAbV,2CAeTiE,MAAM,QACNqG,QAAQ,UACRC,YAAY,MACZN,QAAQ,MACR,aAAW,iBACXQ,KAAM,gBAAC,KAAD,OAvBR,WA6BF,gBAAC,KAAD,CACEC,QAAQ,UACRT,QAAQ,MACRM,YAAY,OACZ5G,QAAS,WACFiC,GACLT,EAASgB,QAAQwE,UAAU,CACzB3J,SAAU,WACVsF,KAAM,YARZ,SAiBJ,gBAAC,KAAD,CAAK6C,EAAG,IACR,gBAAC,KAAD,CAAKrB,MAAOtD,EAAQuE,GAAK,QAAU,SACjC,uBAAKxF,MAAO,CAAES,SAAU,KAAxB,aACA,gBAAC4F,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlD,MAAMrS,UACrCiU,WAAW,SACXrT,SAAU2U,EAAQlD,MAAMrS,UAAY,EACpC8Z,OAAO,MACPC,SAAU,IAEZ,gBAACJ,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlD,MAAMgD,KACrCtB,SAAU,GACVC,MAAM,UACNpT,SAAU2U,EAAQlD,MAAMgD,KAAO,EAC/ByE,OAAO,MACPC,SAAU,KAEP,KAGT,gCACG,IACD,gBAAC,KAAD,CACElC,MAAOtD,EAAQuE,GAAK,QAAU,QAC9B5E,UAAU,SAEV,uBAAKZ,MAAO,CAAES,SAAU,KAAxB,iBACA,gBAAC4F,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlD,MAAMrS,UACrCiU,WAAW,SACXrT,SAAU2U,EAAQlD,MAAMrS,UAAY,EACpC8Z,OAAO,MACPC,SAAU,IAEZ,gBAACJ,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlD,MAAMgD,KACrCtB,SAAU,GACVC,MAAM,UACNpT,SAAU2U,EAAQlD,MAAMgD,KAAO,EAC/ByE,OAAO,MACPC,SAAU,KAGd,gBAAC,KAAD,CAAKb,EAAG,IACR,gBAAC,IAAD,CACEnO,MACI4K,EACDJ,EAAQlE,IAAIuD,OACXW,EAAQlE,IAAIrR,UACZ,mBAHa,iBAKjBga,QAAQ,OAER,gBAAC,KAAD,CACEC,YACGJ,QAAQtE,EAAQlD,MAAMrS,WAAayV,EAAclD,IAEpD2H,UAAWzE,EAAclD,IACzBmB,SAAO,iBAAE,uFACFiC,IAAaJ,EAAQlE,IAAIuD,MADvB,wDAEPc,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf5H,KAAK,OAJA,SAMcwD,EAAOG,QACzB3D,IAAIgD,EAAQlD,MAAMnB,WAClBuF,OAAM,SAACzQ,GAAD,OAAOoU,EAAAA,EAAAA,IAAkBpU,EAAGyO,MAR9B,OAMD1E,EANC,OASP2F,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf5H,KAAK,OAEP6D,EAAiBrG,EAAQ,CACvBsG,KAAM,SACNrW,SAAUuV,EAAQlD,MAAMrS,WAfnB,2CAkBTga,QAAQ,MACR3K,KAAK,KACLiL,YAAY,SACZzC,MAAM,OA1BR,QA+BF,gBAAC,KAAD,CAAKqB,EAAG,IACR,gBAAC,KAAD,CACE3F,QAAQ,OACRuE,cAAc,SACdtE,WAAW,SACXC,eAAe,UAEf,gBAAC,KAAD,CAAapE,KAAK,KAAKsL,YAAU,EAACF,QAAQ,WACxC,gBAAC,IAAD,CACE1P,OAAQ4K,GAAa,iBACrBqE,QAAQ,OAER,gBAAC,KAAD,CACEtG,QAAS,WACFiC,GACLT,EAASgB,QAAQwE,UAAU,CACzB3J,SAAUwE,EAAQlE,IAAIrR,UAEhBiT,MACA/Q,OAAOD,OAAOsT,EAAQlE,IAAIrR,UACxBkC,OAAOD,OAAO,UAChB5C,WACF,WACJgX,KAAM,SAGVkE,QAAQ,UACRP,QAAQ,MACRM,YAAY,OACZzC,MAAM,OAjBR,QAsBDtC,EAAQlE,IAAIuD,OACX,gBAAC,IAAD,CAAS7J,MAAM,aAAaiP,QAAQ,OAClC,gBAAC,KAAD,CACEC,WAAYxE,EAAchD,UAC1ByH,UAAWzE,EAAchD,UACzBiB,SAAO,iBAAE,uFACFiC,EADE,wDAEPD,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf1H,WAAW,OAJN,SAMcsD,EAAOG,QACzBzD,UAAU8C,EAAQlE,IAAID,SACtBqF,OAAM,SAACzQ,GAAD,OAAOoU,EAAAA,EAAAA,IAAkBpU,EAAGyO,MAR9B,OAMD1E,EANC,OASP2F,GAAiB,SAACyE,GAAD,wBACZA,EADY,CAEf1H,WAAW,OAEb2D,EAAiBrG,GAbV,2CAeTsK,QAAQ,UACRI,QAAQ,QACRT,QAAQ,MACR,aAAW,iBACXQ,KAAM,gBAAC,KAAD,WAMhB,gBAAC,KAAD,CAAKtB,EAAG,IACR,gBAAC,KAAD,CAAKrB,MAAOtD,EAAQuE,GAAK,QAAU,SACjC,uBAAKxF,MAAO,CAAES,SAAU,KAAxB,aACA,gBAAC4F,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlE,IAAIrR,UACnCiU,WAAW,SACXrT,SAAU2U,EAAQlE,IAAIrR,UAAY,EAClC8Z,OAAO,MACPC,SAAU,IAEZ,gBAACJ,GAAA,EAAD,CACEC,cAAeC,QAAQtE,EAAQlE,IAAIgE,KACnCtB,SAAU,GACVC,MAAM,UACNpT,SAAU2U,EAAQlE,IAAIgE,KAAO,EAC7ByE,OAAO,MACPC,SAAU,UASxB5E,GACA,gCACE,gBAAC,KAAD,CAAK6D,EAAG,IACR,gBAAC,KAAD,CAAKjF,SAAU,GAAIC,MAAM,YAAzB,qBAEO,KAGX,gBAAC,KAAD,CAAKgF,EAAG,IACR,uBAAK1F,MAAO,CAAES,SAAU,GAAIC,MAAO,UAAWC,WAAY,MAA1D,WAGA,gBAAC,KAAD,CAAK+E,EAAG,IACR,uBACE1F,MAAO,CACLuE,MAAO,IACPtE,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGlB,gBAAC,KAAD,CACEH,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBmH,SAAU,SAGXvG,EAASwG,QAAQ/Z,OAAS,EACzBuT,EAASwG,QAAQpb,KAAI,SAACqb,GAAD,OACnB,gBAAC,KAAD,CAAK1B,IAAK0B,EAAQhZ,EAAE,KAClB,gBAACsR,GAAD,CACEM,QAAS,kBAAMuF,EAAAA,EAAAA,IAAS,oBAAoB6B,KAE3CA,OAKP,uBAAKxH,MAAO,CAAES,SAAU,GAAIgH,QAAS,KAArC","sources":["webpack://space-budz/./src/cardano/market/loader.js","webpack://space-budz/./src/cardano/market/utils.js","webpack://space-budz/./src/cardano/market/coinSelection.js","webpack://space-budz/./src/cardano/market/index.js","webpack://space-budz/./src/cardano/market/plutus.js","webpack://space-budz/./src/cardano/market/languageViews.js","webpack://space-budz/./src/images/assets/show.svg","webpack://space-budz/./src/templates/spacebud.js"],"sourcesContent":["class Loader {\n  async load() {\n    if (this._wasm) return;\n    /**\n     * @private\n     */\n    this._wasm = await import(\n      \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib\"\n    );\n  }\n\n  get Cardano() {\n    return this._wasm;\n  }\n}\n\nexport default new Loader();\n","import { Buffer } from \"buffer\";\nimport {\n  BigNum,\n  PlutusData,\n} from \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib\";\nimport Loader from \"./loader.js\";\n\nexport const fromHex = (hex) => Buffer.from(hex, \"hex\");\nexport const toHex = (bytes) => Buffer.from(bytes).toString(\"hex\");\nexport const toBytesNum = (num) =>\n  num\n    .toString()\n    .split(\"\")\n    .map((d) => \"3\" + d)\n    .join(\"\");\nexport const fromAscii = (hex) => Buffer.from(hex).toString(\"hex\");\n\nexport const assetsToValue = (assets) => {\n  const multiAsset = Loader.Cardano.MultiAsset.new();\n  const lovelace = assets.find((asset) => asset.unit === \"lovelace\");\n  const policies = [\n    ...new Set(\n      assets\n        .filter((asset) => asset.unit !== \"lovelace\")\n        .map((asset) => asset.unit.slice(0, 56))\n    ),\n  ];\n  policies.forEach((policy) => {\n    const policyAssets = assets.filter(\n      (asset) => asset.unit.slice(0, 56) === policy\n    );\n    const assetsValue = Loader.Cardano.Assets.new();\n    policyAssets.forEach((asset) => {\n      assetsValue.insert(\n        Loader.Cardano.AssetName.new(Buffer.from(asset.unit.slice(56), \"hex\")),\n        Loader.Cardano.BigNum.from_str(asset.quantity)\n      );\n    });\n    multiAsset.insert(\n      Loader.Cardano.ScriptHash.from_bytes(Buffer.from(policy, \"hex\")),\n      assetsValue\n    );\n  });\n  const value = Loader.Cardano.Value.new(\n    Loader.Cardano.BigNum.from_str(lovelace ? lovelace.quantity : \"0\")\n  );\n  if (assets.length > 1 || !lovelace) value.set_multiasset(multiAsset);\n  return value;\n};\n\nexport const valueToAssets = (value) => {\n  const assets = [];\n  assets.push({ unit: \"lovelace\", quantity: value.coin().to_str() });\n  if (value.multiasset()) {\n    const multiAssets = value.multiasset().keys();\n    for (let j = 0; j < multiAssets.len(); j++) {\n      const policy = multiAssets.get(j);\n      const policyAssets = value.multiasset().get(policy);\n      const assetNames = policyAssets.keys();\n      for (let k = 0; k < assetNames.len(); k++) {\n        const policyAsset = assetNames.get(k);\n        const quantity = policyAssets.get(policyAsset);\n        const asset =\n          Buffer.from(policy.to_bytes(), \"hex\").toString(\"hex\") +\n          Buffer.from(policyAsset.name(), \"hex\").toString(\"hex\");\n        assets.push({\n          unit: asset,\n          quantity: quantity.to_str(),\n        });\n      }\n    }\n  }\n  return assets;\n};\n\n/**\n *\n * @param {PlutusData} datum\n */\nexport const getTradeDetails = (datum) => {\n  const tradeDetails = datum\n    .as_constr_plutus_data()\n    .data()\n    .get(0)\n    .as_constr_plutus_data()\n    .data();\n  return {\n    tradeOwner: Loader.Cardano.Ed25519KeyHash.from_bytes(\n      tradeDetails.get(0).as_bytes()\n    ),\n    budId: toHex(tradeDetails.get(1).as_bytes()),\n    requestedAmount: tradeDetails.get(2).as_integer().as_u64(),\n  };\n};\n\n/**\n *\n * @param {BigNum} amount\n * @param {BigNum} p\n */\nexport const lovelacePercentage = (amount, p) => {\n  return amount\n    .checked_mul(Loader.Cardano.BigNum.from_str(\"10\"))\n    .checked_div(p);\n};\n","import {\n  TransactionUnspentOutput,\n  TransactionOutputs,\n  Value,\n} from \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib\";\nimport Loader from \"./loader\";\nconst BigInt = typeof window !== \"undefined\" && window.BigInt;\n\n/**\n * BerryPool implementation of the __Random-Improve__ coin selection algorithm.\n *\n * = Overview\n *\n * The __Random-Improve__ coin selection algorithm works in __two phases__, by\n * /first/ selecting UTxO entries /at random/ to pay for each of the given\n * outputs, and /then/ attempting to /improve/ upon each of the selections.\n *\n * === Phase 1: Random Selection\n *\n * __In this phase, the algorithm randomly selects a minimal set of UTxO__\n * __entries to pay for each of the given outputs.__\n *\n * During this phase, the algorithm:\n *\n *   *  processes outputs in /descending order of coin value/.\n *\n *   *  maintains a /remaining UTxO set/, initially equal to the given\n *      /UTxO set/ parameter.\n *\n *   *  based on every output nature, generate a /native token UTxO subset/\n *      to narrow down to useful UTxO\n *\n *   *  maintains an /accumulated coin selection/, which is initially /empty/.\n *\n * For each output of value __/v/__, the algorithm /randomly/ selects entries\n * from the /remaining UTxO set/, until the total value of selected entries is\n * greater than or equal to __/v/__. The selected entries are then associated\n * with that output, and removed from the /remaining UTxO set/.\n *\n * This phase ends when every output has been associated with a selection of\n * UTxO entries.\n *\n * However, if the remaining UTxO set is completely exhausted before all\n * outputs can be processed, the algorithm terminates with an error.\n *\n * === Phase 2: Improvement\n *\n * __In this phase, the algorithm attempts to improve upon each of the UTxO__\n * __selections made in the previous phase, by conservatively expanding the__\n * __selection made for each output.__\n *\n * During this phase, the algorithm:\n *\n *   *  processes outputs in /ascending order of coin value/.\n *\n *   *  continues to maintain the /remaining UTxO set/ produced by the previous\n *      phase.\n *\n *   *  maintains an /accumulated coin selection/, initiated from previous phase.\n *\n * For each output of value __/v/__, the algorithm:\n *\n *  1.  __Calculates a /target range/__ for the total value of inputs used to\n *      pay for that output, defined by the triplet:\n *\n *      (/minimum/, /ideal/, /maximum/) = (/v/, /2v/, /3v/)\n *\n *  2.  __Attempts to /improve/ upon the /existing UTxO selection/__ for that\n *      output, by repeatedly selecting additional entries at random from the\n *      /remaining UTxO set/, stopping when the selection can be improved upon\n *      no further.\n *\n *      A selection with value /v1/ is considered to be an /improvement/ over a\n *      selection with value /v0/ if __all__ of the following conditions are\n *      satisfied:\n *\n *       * __Condition 1__: we have moved closer to the /ideal/ value:\n *\n *             abs (/ideal/ − /v1/) < abs (/ideal/ − /v0/)\n *\n *       * __Condition 2__: we have not exceeded the /maximum/ value:\n *\n *             /v1/ ≤ /maximum/\n *\n *       * __Condition 3__: when counting cumulatively across all outputs\n *       considered so far, we have not selected more than the /maximum/ number\n *       of UTxO entries specified by 'limit'.\n *\n *  3.  __Creates a /change value/__ for the output, equal to the total value\n *      of the /final UTxO selection/ for that output minus the value /v/ of\n *      that output.\n *\n *  4.  __Updates the /accumulated coin selection/__:\n *\n *       * Adds the /output/ to 'outputs'.\n *       * Adds the /improved UTxO selection/ to 'inputs'.\n *       * Adds the /change value/ to 'change'.\n *\n * This phase ends when every output has been processed, __or__ when the\n * /remaining UTxO set/ has been exhausted, whichever occurs sooner.\n *\n * = Termination\n *\n * When both phases are complete, the algorithm terminates.\n *\n * The /accumulated coin selection/ and /remaining UTxO set/ are returned to\n * the caller.\n *\n * === Failure Modes\n *\n * The algorithm terminates with an __error__ if:\n *\n *  1.  The /total value/ of the initial UTxO set (the amount of money\n *      /available/) is /less than/ the total value of the output list (the\n *      amount of money /required/).\n *\n *      See: __'InputsExhaustedError'__.\n *\n *  2.  The /number/ of UTxO entries needed to pay for the requested outputs\n *      would /exceed/ the upper limit specified by 'limit'.\n *\n *      See: __'InputLimitExceededError'__.\n *\n * == Motivating Principles\n *\n * There are several motivating principles behind the design of the algorithm.\n *\n * === Principle 1: Dust Management\n *\n * The probability that random selection will choose dust entries from a UTxO\n * set increases with the proportion of dust in the set.\n *\n * Therefore, for a UTxO set with a large amount of dust, there's a high\n * probability that a random subset will include a large amount of dust.\n *\n * === Principle 2: Change Management\n *\n * Ideally, coin selection algorithms should, over time, create a UTxO set that\n * has /useful/ outputs: outputs that will allow us to process future payments\n * with a minimum number of inputs.\n *\n * If for each payment request of value __/v/__ we create a change output of\n * /roughly/ the same value __/v/__, then we will end up with a distribution of\n * change values that matches the typical value distribution of payment\n * requests.\n *\n * === Principle 3: Performance Management\n *\n * Searching the UTxO set for additional entries to improve our change outputs\n * is /only/ useful if the UTxO set contains entries that are sufficiently\n * small enough. But it is precisely when the UTxO set contains many small\n * entries that it is less likely for a randomly-chosen UTxO entry to push the\n * total above the upper bound.\n */\n\n/**\n * @typedef {Value[]} AmountList - List of 'Value' object\n */\n\n/**\n * @typedef {TransactionUnspentOutput[]} UTxOList - List of UTxO\n */\n\n/**\n * @typedef {Object} UTxOSelection - Coin Selection algorithm core object\n * @property {UTxOList} selection - Accumulated UTxO set.\n * @property {UTxOList} remaining - Remaining UTxO set.\n * @property {UTxOList} subset - Remaining UTxO set.\n * @property {Value} amount - UTxO amount of each requested token\n */\n\n/**\n * @typedef {Object} ImproveRange - ImproveRange\n * @property {Value} ideal - Requested amount * 2\n * @property {Value} maximum - Requested amount * 3\n */\n\n/**\n * @typedef {Object} SelectionResult - Coin Selection algorithm return\n * @property {UTxOList} input - Accumulated UTxO set.\n * @property {OutputList} output - Requested outputs.\n * @property {UTxOList} remaining - Remaining UTxO set.\n * @property {Value} amount - UTxO amount of each requested token\n * @property {Value} change - Accumulated change amount.\n */\n\n/**\n * @typedef {Object} ProtocolParameters\n * @property {int} minUTxO\n * @property {int} minFeeA\n * @property {int} minFeeB\n * @property {int} maxTxSize\n */\n\n/**\n * @type {ProtocolParameters}\n */\nlet protocolParameters = null;\n\n/**\n * CoinSelection Module.\n * @module src/lib/CoinSelection\n */\nconst CoinSelection = {\n  /**\n   * Set protocol parameters required by the algorithm\n   * @param {string} minUTxO\n   * @param {string} minFeeA\n   * @param {string} minFeeB\n   * @param {string} maxTxSize\n   */\n  setProtocolParameters: (minUTxO, minFeeA, minFeeB, maxTxSize) => {\n    protocolParameters = {\n      minUTxO: minUTxO,\n      minFeeA: minFeeA,\n      minFeeB: minFeeB,\n      maxTxSize: maxTxSize,\n    };\n  },\n  /**\n   * Random-Improve coin selection algorithm\n   * @param {UTxOList} inputs - The set of inputs available for selection.\n   * @param {TransactionOutputs} outputs - The set of outputs requested for payment.\n   * @param {int} limit - A limit on the number of inputs that can be selected.\n   * @param {UTxOList} [preset=[]]] - The pre-selection of inputs that will be added.\n   * @return {SelectionResult} - Coin Selection algorithm return\n   */\n  randomImprove: (inputs, outputs, limit, preset = []) => {\n    if (!protocolParameters)\n      throw new Error(\n        \"Protocol parameters not set. Use setProtocolParameters().\"\n      );\n\n    const _minUTxOValue =\n      BigInt(outputs.len()) * BigInt(protocolParameters.minUTxO);\n\n    let amount = Loader.Cardano.Value.new(Loader.Cardano.BigNum.from_str(\"0\"));\n\n    for (let i = 0; i < preset.length; i++) {\n      amount = addAmounts(preset[i].output().amount(), amount);\n    }\n\n    /** @type {UTxOSelection} */\n    let utxoSelection = {\n      selection: [...preset], // Shallow copy\n      remaining: [...inputs], // Shallow copy\n      subset: [],\n      amount: amount,\n    };\n\n    let mergedOutputsAmounts = mergeOutputsAmounts(outputs);\n\n    // Explode amount in an array of unique asset amount for comparison's sake\n    let splitOutputsAmounts = splitAmounts(mergedOutputsAmounts);\n\n    // Phase 1: Select enough input\n    for (let i = 0; i < splitOutputsAmounts.length; i++) {\n      createSubSet(utxoSelection, splitOutputsAmounts[i]); // Narrow down for NatToken UTxO\n\n      utxoSelection = select(\n        utxoSelection,\n        splitOutputsAmounts[i],\n        limit,\n        _minUTxOValue\n      );\n    }\n\n    // Phase 2: Improve\n    splitOutputsAmounts = sortAmountList(splitOutputsAmounts);\n\n    for (let i = 0; i < splitOutputsAmounts.length; i++) {\n      createSubSet(utxoSelection, splitOutputsAmounts[i]); // Narrow down for NatToken UTxO\n\n      let range = {};\n      range.ideal = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(\"0\")\n      )\n        .checked_add(splitOutputsAmounts[i])\n        .checked_add(splitOutputsAmounts[i]);\n      range.maximum = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(\"0\")\n      )\n        .checked_add(range.ideal)\n        .checked_add(splitOutputsAmounts[i]);\n\n      improve(\n        utxoSelection,\n        splitOutputsAmounts[i],\n        limit - utxoSelection.selection.length,\n        range\n      );\n    }\n\n    // Insure change hold enough Ada to cover included native assets and fees\n    if (utxoSelection.remaining.length > 0) {\n      const change = utxoSelection.amount.checked_sub(mergedOutputsAmounts);\n\n      let minAmount = Loader.Cardano.Value.new(\n        Loader.Cardano.min_ada_required(\n          change,\n          Loader.Cardano.BigNum.from_str(protocolParameters.minUTxO)\n        )\n      );\n\n      let maxFee =\n        BigInt(protocolParameters.minFeeA) *\n          BigInt(protocolParameters.maxTxSize) +\n        BigInt(protocolParameters.minFeeB);\n\n      maxFee = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(maxFee.toString())\n      );\n\n      minAmount = minAmount.checked_add(maxFee);\n\n      if (compare(change, minAmount) < 0) {\n        // Not enough, add missing amount and run select one last time\n        const minAda = minAmount\n          .checked_sub(Loader.Cardano.Value.new(change.coin()))\n          .checked_add(Loader.Cardano.Value.new(utxoSelection.amount.coin()));\n\n        createSubSet(utxoSelection, minAda);\n        utxoSelection = select(utxoSelection, minAda, limit, _minUTxOValue);\n      }\n    }\n\n    return {\n      input: utxoSelection.selection,\n      output: outputs,\n      remaining: utxoSelection.remaining,\n      amount: utxoSelection.amount,\n      change: utxoSelection.amount.checked_sub(mergedOutputsAmounts),\n    };\n  },\n};\n\n/**\n * Use randomSelect & descSelect algorithm to select enough UTxO to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\nfunction select(utxoSelection, outputAmount, limit, minUTxOValue) {\n  try {\n    utxoSelection = randomSelect(\n      cloneUTxOSelection(utxoSelection), // Deep copy in case of fallback needed\n      outputAmount,\n      limit - utxoSelection.selection.length,\n      minUTxOValue\n    );\n  } catch (e) {\n    if (e.message === \"INPUT_LIMIT_EXCEEDED\") {\n      // Limit reached : Fallback on DescOrdAlgo\n      utxoSelection = descSelect(\n        utxoSelection,\n        outputAmount,\n        limit - utxoSelection.selection.length,\n        minUTxOValue\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  return utxoSelection;\n}\n\n/**\n * Randomly select enough UTxO to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\nfunction randomSelect(utxoSelection, outputAmount, limit, minUTxOValue) {\n  let nbFreeUTxO = utxoSelection.subset.length;\n  // If quantity is met, return subset into remaining list and exit\n  if (\n    isQtyFulfilled(outputAmount, utxoSelection.amount, minUTxOValue, nbFreeUTxO)\n  ) {\n    utxoSelection.remaining = [\n      ...utxoSelection.remaining,\n      ...utxoSelection.subset,\n    ];\n    utxoSelection.subset = [];\n    return utxoSelection;\n  }\n\n  if (limit <= 0) {\n    throw new Error(\"INPUT_LIMIT_EXCEEDED\");\n  }\n\n  if (nbFreeUTxO <= 0) {\n    if (isQtyFulfilled(outputAmount, utxoSelection.amount, 0, 0)) {\n      throw new Error(\"MIN_UTXO_ERROR\");\n    }\n    throw new Error(\"INPUTS_EXHAUSTED\");\n  }\n\n  /** @type {TransactionUnspentOutput} utxo */\n  let utxo = utxoSelection.subset\n    .splice(Math.floor(Math.random() * nbFreeUTxO), 1)\n    .pop();\n\n  utxoSelection.selection.push(utxo);\n  utxoSelection.amount = addAmounts(\n    utxo.output().amount(),\n    utxoSelection.amount\n  );\n\n  return randomSelect(utxoSelection, outputAmount, limit - 1, minUTxOValue);\n}\n\n/**\n * Select enough UTxO in DESC order to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\nfunction descSelect(utxoSelection, outputAmount, limit, minUTxOValue) {\n  // Sort UTxO subset in DESC order for required Output unit type\n  utxoSelection.subset = utxoSelection.subset.sort((a, b) => {\n    return Number(\n      searchAmountValue(outputAmount, b.output().amount()) -\n        searchAmountValue(outputAmount, a.output().amount())\n    );\n  });\n\n  do {\n    if (limit <= 0) {\n      throw new Error(\"INPUT_LIMIT_EXCEEDED\");\n    }\n\n    if (utxoSelection.subset.length <= 0) {\n      if (isQtyFulfilled(outputAmount, utxoSelection.amount, 0, 0)) {\n        throw new Error(\"MIN_UTXO_ERROR\");\n      }\n      throw new Error(\"INPUTS_EXHAUSTED\");\n    }\n\n    /** @type {TransactionUnspentOutput} utxo */\n    let utxo = utxoSelection.subset.splice(0, 1).pop();\n\n    utxoSelection.selection.push(utxo);\n    utxoSelection.amount = addAmounts(\n      utxo.output().amount(),\n      utxoSelection.amount\n    );\n\n    limit--;\n  } while (\n    !isQtyFulfilled(\n      outputAmount,\n      utxoSelection.amount,\n      minUTxOValue,\n      utxoSelection.subset.length - 1\n    )\n  );\n\n  // Quantity is met, return subset into remaining list and return selection\n  utxoSelection.remaining = [\n    ...utxoSelection.remaining,\n    ...utxoSelection.subset,\n  ];\n  utxoSelection.subset = [];\n\n  return utxoSelection;\n}\n\n/**\n * Try to improve selection by increasing input amount in [2x,3x] range.\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {ImproveRange} range - Improvement range target values\n */\nfunction improve(utxoSelection, outputAmount, limit, range) {\n  let nbFreeUTxO = utxoSelection.subset.length;\n\n  if (\n    compare(utxoSelection.amount, range.ideal) >= 0 ||\n    nbFreeUTxO <= 0 ||\n    limit <= 0\n  ) {\n    // Return subset in remaining\n    utxoSelection.remaining = [\n      ...utxoSelection.remaining,\n      ...utxoSelection.subset,\n    ];\n    utxoSelection.subset = [];\n\n    return;\n  }\n\n  /** @type {TransactionUnspentOutput} utxo */\n  const utxo = utxoSelection.subset\n    .splice(Math.floor(Math.random() * nbFreeUTxO), 1)\n    .pop();\n\n  const newAmount = Loader.Cardano.Value.new(\n    Loader.Cardano.BigNum.from_str(\"0\")\n  )\n    .checked_add(utxo.output().amount())\n    .checked_add(outputAmount);\n\n  if (\n    abs(getAmountValue(range.ideal) - getAmountValue(newAmount)) <\n      abs(getAmountValue(range.ideal) - getAmountValue(outputAmount)) &&\n    compare(newAmount, range.maximum) <= 0\n  ) {\n    utxoSelection.selection.push(utxo);\n    utxoSelection.amount = addAmounts(\n      utxo.output().amount(),\n      utxoSelection.amount\n    );\n    limit--;\n  } else {\n    utxoSelection.remaining.push(utxo);\n  }\n\n  return improve(utxoSelection, outputAmount, limit, range);\n}\n\n/**\n * Compile all required outputs to a flat amounts list\n * @param {TransactionOutputs} outputs - The set of outputs requested for payment.\n * @return {Value} - The compiled set of amounts requested for payment.\n */\nfunction mergeOutputsAmounts(outputs) {\n  let compiledAmountList = Loader.Cardano.Value.new(\n    Loader.Cardano.BigNum.from_str(\"0\")\n  );\n\n  for (let i = 0; i < outputs.len(); i++) {\n    compiledAmountList = addAmounts(\n      outputs.get(i).amount(),\n      compiledAmountList\n    );\n  }\n\n  return compiledAmountList;\n}\n\n/**\n * Add up an Amounts List values to another Amounts List\n * @param {Value} amounts - Set of amounts to be added.\n * @param {Value} compiledAmounts - The compiled set of amounts.\n * @return {Value}\n */\nfunction addAmounts(amounts, compiledAmounts) {\n  return compiledAmounts.checked_add(amounts);\n}\n\n/**\n * Split amounts contained in a single {Value} object in separate {Value} objects\n * @param {Value} amounts - Set of amounts to be split.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {AmountList}\n */\nfunction splitAmounts(amounts) {\n  let splitAmounts = [];\n\n  if (amounts.multiasset()) {\n    let mA = amounts.multiasset();\n\n    for (let i = 0; i < mA.keys().len(); i++) {\n      let scriptHash = mA.keys().get(i);\n\n      for (let j = 0; j < mA.get(scriptHash).keys().len(); j++) {\n        let _assets = Loader.Cardano.Assets.new();\n        let assetName = mA.get(scriptHash).keys().get(j);\n\n        _assets.insert(\n          Loader.Cardano.AssetName.from_bytes(assetName.to_bytes()),\n          Loader.Cardano.BigNum.from_bytes(\n            mA.get(scriptHash).get(assetName).to_bytes()\n          )\n        );\n\n        let _multiasset = Loader.Cardano.MultiAsset.new();\n        _multiasset.insert(\n          Loader.Cardano.ScriptHash.from_bytes(scriptHash.to_bytes()),\n          _assets\n        );\n        let _value = Loader.Cardano.Value.new(\n          Loader.Cardano.BigNum.from_str(\"0\")\n        );\n        _value.set_multiasset(_multiasset);\n\n        splitAmounts.push(_value);\n      }\n    }\n  }\n\n  // Order assets by qty DESC\n  splitAmounts = sortAmountList(splitAmounts, \"DESC\");\n\n  // Insure lovelace is last to account for min ada requirement\n  splitAmounts.push(\n    Loader.Cardano.Value.new(\n      Loader.Cardano.BigNum.from_bytes(amounts.coin().to_bytes())\n    )\n  );\n\n  return splitAmounts;\n}\n\n/**\n * Sort a mismatched AmountList ASC/DESC\n * @param {AmountList} amountList - Set of mismatched amounts to be sorted.\n * @param {string} [sortOrder=ASC] - Order\n * @return {AmountList} - The sorted AmountList\n */\nfunction sortAmountList(amountList, sortOrder = \"ASC\") {\n  return amountList.sort((a, b) => {\n    let sortInt = sortOrder === \"DESC\" ? BigInt(-1) : BigInt(1);\n    return Number((getAmountValue(a) - getAmountValue(b)) * sortInt);\n  });\n}\n\n/**\n * Return BigInt amount value\n * @param {Value} amount\n * @return {bigint}\n */\nfunction getAmountValue(amount) {\n  let val = BigInt(0);\n  let lovelace = BigInt(amount.coin().to_str());\n\n  if (lovelace > 0) {\n    val = lovelace;\n  } else if (amount.multiasset() && amount.multiasset().len() > 0) {\n    let scriptHash = amount.multiasset().keys().get(0);\n    let assetName = amount.multiasset().get(scriptHash).keys().get(0);\n    val = BigInt(amount.multiasset().get(scriptHash).get(assetName).to_str());\n  }\n\n  return val;\n}\n\n/**\n * Search & Return BigInt amount value\n * @param {Value} needle\n * @param {Value} haystack\n * @return {bigint}\n */\nfunction searchAmountValue(needle, haystack) {\n  let val = BigInt(0);\n  let lovelace = BigInt(needle.coin().to_str());\n\n  if (lovelace > 0) {\n    val = BigInt(haystack.coin().to_str());\n  } else if (\n    needle.multiasset() &&\n    haystack.multiasset() &&\n    needle.multiasset().len() > 0 &&\n    haystack.multiasset().len() > 0\n  ) {\n    let scriptHash = needle.multiasset().keys().get(0);\n    let assetName = needle.multiasset().get(scriptHash).keys().get(0);\n    val = BigInt(haystack.multiasset().get(scriptHash).get(assetName).to_str());\n  }\n\n  return val;\n}\n\n/**\n * Narrow down remaining UTxO set in case of native token, use full set for lovelace\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} output - Single compiled output qty requested for payment.\n */\nfunction createSubSet(utxoSelection, output) {\n  if (BigInt(output.coin().to_str()) < BigInt(1)) {\n    let subset = [];\n    let remaining = [];\n    for (let i = 0; i < utxoSelection.remaining.length; i++) {\n      if (\n        compare(utxoSelection.remaining[i].output().amount(), output) !==\n        undefined\n      ) {\n        subset.push(utxoSelection.remaining[i]);\n      } else {\n        remaining.push(utxoSelection.remaining[i]);\n      }\n    }\n    utxoSelection.subset = subset;\n    utxoSelection.remaining = remaining;\n  } else {\n    utxoSelection.subset = utxoSelection.remaining.splice(\n      0,\n      utxoSelection.remaining.length\n    );\n  }\n}\n\n/**\n * Is Quantity Fulfilled Condition - Handle 'minUTxOValue' protocol parameter.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {Value} cumulatedAmount - Single compiled accumulated UTxO qty.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @param {int} nbFreeUTxO - Number of free UTxO available.\n * @return {boolean}\n */\nfunction isQtyFulfilled(\n  outputAmount,\n  cumulatedAmount,\n  minUTxOValue,\n  nbFreeUTxO\n) {\n  let amount = outputAmount;\n\n  if (minUTxOValue && BigInt(outputAmount.coin().to_str()) > 0) {\n    let minAmount = Loader.Cardano.Value.new(\n      Loader.Cardano.min_ada_required(\n        cumulatedAmount,\n        Loader.Cardano.BigNum.from_str(minUTxOValue.toString())\n      )\n    );\n\n    // Lovelace min amount to cover assets and number of output need to be met\n    if (compare(cumulatedAmount, minAmount) < 0) return false;\n\n    // If requested Lovelace lower than minAmount, plan for change\n    if (compare(outputAmount, minAmount) < 0) {\n      amount = minAmount.checked_add(\n        Loader.Cardano.Value.new(\n          Loader.Cardano.BigNum.from_str(protocolParameters.minUTxO)\n        )\n      );\n    }\n\n    // Try covering the max fees\n    if (nbFreeUTxO > 0) {\n      let maxFee =\n        BigInt(protocolParameters.minFeeA) *\n          BigInt(protocolParameters.maxTxSize) +\n        BigInt(protocolParameters.minFeeB);\n\n      maxFee = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(maxFee.toString())\n      );\n\n      amount = amount.checked_add(maxFee);\n    }\n  }\n\n  return compare(cumulatedAmount, amount) >= 0;\n}\n\n/**\n * Return a deep copy of UTxOSelection\n * @param {UTxOSelection} utxoSelection\n * @return {UTxOSelection} Clone - Deep copy\n */\nfunction cloneUTxOSelection(utxoSelection) {\n  return {\n    selection: cloneUTxOList(utxoSelection.selection),\n    remaining: cloneUTxOList(utxoSelection.remaining),\n    subset: cloneUTxOList(utxoSelection.subset),\n    amount: cloneValue(utxoSelection.amount),\n  };\n}\n\n/**\n * Return a deep copy of an UTxO List\n * @param {UTxOList} utxoList\n * @return {UTxOList} Cone - Deep copy\n */\nconst cloneUTxOList = (utxoList) =>\n  utxoList.map((utxo) =>\n    Loader.Cardano.TransactionUnspentOutput.from_bytes(utxo.to_bytes())\n  );\n\n/**\n * Return a deep copy of a Value object\n * @param {Value} value\n * @return {Value} Cone - Deep copy\n */\nconst cloneValue = (value) => Loader.Cardano.Value.from_bytes(value.to_bytes());\n\n// Helper\nfunction abs(big) {\n  return big < 0 ? big * BigInt(-1) : big;\n}\n\n/**\n * Compare a candidate value to the one in a group if present\n * @param {Value} group\n * @param {Value} candidate\n * @return {int} - -1 group lower, 0 equal, 1 group higher, undefined if no match\n */\nfunction compare(group, candidate) {\n  let gQty = BigInt(group.coin().to_str());\n  let cQty = BigInt(candidate.coin().to_str());\n\n  if (candidate.multiasset()) {\n    let cScriptHash = candidate.multiasset().keys().get(0);\n    let cAssetName = candidate.multiasset().get(cScriptHash).keys().get(0);\n\n    if (group.multiasset() && group.multiasset().len()) {\n      if (\n        group.multiasset().get(cScriptHash) &&\n        group.multiasset().get(cScriptHash).get(cAssetName)\n      ) {\n        gQty = BigInt(\n          group.multiasset().get(cScriptHash).get(cAssetName).to_str()\n        );\n        cQty = BigInt(\n          candidate.multiasset().get(cScriptHash).get(cAssetName).to_str()\n        );\n      } else {\n        return undefined;\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  return gQty >= cQty ? (gQty === cQty ? 0 : 1) : -1;\n}\n\nexport default CoinSelection;\n","import Loader from \"./loader.js\";\nimport {\n  assetsToValue,\n  fromAscii,\n  fromHex,\n  getTradeDetails,\n  lovelacePercentage,\n  toBytesNum,\n  toHex,\n  valueToAssets,\n} from \"./utils.js\";\nimport { languageViews } from \"./languageViews.js\";\nimport { contract } from \"./plutus.js\";\nimport CoinSelection from \"./coinSelection.js\";\nimport {\n  Address,\n  PlutusData,\n  TransactionUnspentOutput,\n} from \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\";\n\nconst DATUM_LABEL = 405;\nconst ADDRESS_LABEL = 406;\n\n// Validator\nconst CONTRACT = () => {\n  const scripts = Loader.Cardano.PlutusScripts.new();\n  scripts.add(Loader.Cardano.PlutusScript.new(fromHex(contract)));\n  return scripts;\n};\n\nconst CONTRACT_ADDRESS = () =>\n  Loader.Cardano.Address.from_bech32(\n    \"addr1wyzynye0nksztrfzpsulsq7whr3vgh7uvp0gm4p0x42ckkqqq6kxq\"\n  );\n\n// Datums\nconst START_BID = () => {\n  const datum = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(DATUM_TYPE.StartBid),\n      Loader.Cardano.PlutusList.new()\n    )\n  );\n  return datum;\n};\nconst BID = ({ tradeOwner, budId }) => {\n  const fieldsInner = Loader.Cardano.PlutusList.new();\n  fieldsInner.add(Loader.Cardano.PlutusData.new_bytes(fromHex(tradeOwner)));\n  fieldsInner.add(\n    Loader.Cardano.PlutusData.new_bytes(fromHex(toBytesNum(budId)))\n  );\n  fieldsInner.add(\n    Loader.Cardano.PlutusData.new_integer(Loader.Cardano.BigInt.from_str(\"1\"))\n  );\n  const tradeDetails = Loader.Cardano.PlutusList.new();\n  tradeDetails.add(\n    Loader.Cardano.PlutusData.new_constr_plutus_data(\n      Loader.Cardano.ConstrPlutusData.new(\n        Loader.Cardano.Int.new_i32(0),\n        fieldsInner\n      )\n    )\n  );\n  const datum = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(DATUM_TYPE.Bid),\n      tradeDetails\n    )\n  );\n  return datum;\n};\nconst OFFER = ({ tradeOwner, budId, requestedAmount }) => {\n  const fieldsInner = Loader.Cardano.PlutusList.new();\n  fieldsInner.add(Loader.Cardano.PlutusData.new_bytes(fromHex(tradeOwner)));\n  fieldsInner.add(\n    Loader.Cardano.PlutusData.new_bytes(fromHex(toBytesNum(budId)))\n  );\n  fieldsInner.add(\n    Loader.Cardano.PlutusData.new_integer(\n      Loader.Cardano.BigInt.from_str(requestedAmount)\n    )\n  );\n  const tradeDetails = Loader.Cardano.PlutusList.new();\n  tradeDetails.add(\n    Loader.Cardano.PlutusData.new_constr_plutus_data(\n      Loader.Cardano.ConstrPlutusData.new(\n        Loader.Cardano.Int.new_i32(0),\n        fieldsInner\n      )\n    )\n  );\n  const datum = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(DATUM_TYPE.Offer),\n      tradeDetails\n    )\n  );\n  return datum;\n};\n\nconst DATUM_TYPE = {\n  StartBid: 0,\n  Bid: 1,\n  Offer: 2,\n};\n\n// Redeemers\nconst BUY = (index) => {\n  const redeemerData = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(0),\n      Loader.Cardano.PlutusList.new()\n    )\n  );\n  const redeemer = Loader.Cardano.Redeemer.new(\n    Loader.Cardano.RedeemerTag.new_spend(),\n    Loader.Cardano.BigNum.from_str(index),\n    redeemerData,\n    Loader.Cardano.ExUnits.new(\n      Loader.Cardano.BigNum.from_str(\"7000000\"),\n      Loader.Cardano.BigNum.from_str(\"3000000000\")\n    )\n  );\n  return redeemer;\n};\nconst SELL = (index) => {\n  const redeemerData = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(1),\n      Loader.Cardano.PlutusList.new()\n    )\n  );\n  const redeemer = Loader.Cardano.Redeemer.new(\n    Loader.Cardano.RedeemerTag.new_spend(),\n    Loader.Cardano.BigNum.from_str(index),\n    redeemerData,\n    Loader.Cardano.ExUnits.new(\n      Loader.Cardano.BigNum.from_str(\"7000000\"),\n      Loader.Cardano.BigNum.from_str(\"3000000000\")\n    )\n  );\n  return redeemer;\n};\nconst BID_HIGHER = (index) => {\n  const redeemerData = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(2),\n      Loader.Cardano.PlutusList.new()\n    )\n  );\n  const redeemer = Loader.Cardano.Redeemer.new(\n    Loader.Cardano.RedeemerTag.new_spend(),\n    Loader.Cardano.BigNum.from_str(index),\n    redeemerData,\n    Loader.Cardano.ExUnits.new(\n      Loader.Cardano.BigNum.from_str(\"7000000\"),\n      Loader.Cardano.BigNum.from_str(\"3000000000\")\n    )\n  );\n  return redeemer;\n};\nconst CANCEL = (index) => {\n  const redeemerData = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(3),\n      Loader.Cardano.PlutusList.new()\n    )\n  );\n  const redeemer = Loader.Cardano.Redeemer.new(\n    Loader.Cardano.RedeemerTag.new_spend(),\n    Loader.Cardano.BigNum.from_str(index),\n    redeemerData,\n    Loader.Cardano.ExUnits.new(\n      Loader.Cardano.BigNum.from_str(\"5000000\"),\n      Loader.Cardano.BigNum.from_str(\"2000000000\")\n    )\n  );\n  return redeemer;\n};\n\nconst toFraction = (p) => Math.floor(1 / (p / 1000));\n\nclass SpaceBudzMarket {\n  constructor({ base, projectId }, extraFeeRecipient) {\n    this.provider = { base, projectId };\n    this.extraFeeRecipient = extraFeeRecipient;\n  }\n\n  /**\n   *\n   * @typedef {Object} TradeUtxo\n   * @property {PlutusData} datum\n   * @property {Address} tradeOwnerAddress\n   * @property {TransactionUnspentOutput} utxo\n   * @property {string} budId\n   * @property {string} lovelace bid amount or requested amount from offer\n   */\n\n  /**\n   *@private\n   */\n  async blockfrostRequest(endpoint, headers, body) {\n    return await fetch(this.provider.base + endpoint, {\n      headers: {\n        project_id: this.provider.projectId,\n        ...headers,\n        \"User-Agent\": \"spacebudz-marketplace\",\n      },\n      method: body ? \"POST\" : \"GET\",\n      body,\n    }).then((res) => res.json());\n  }\n\n  /**\n   * @private\n   * @returns {TradeUtxo[]}\n   */\n  async getUtxo(policy, prefix, budId) {\n    const asset = policy + fromAscii(prefix + budId);\n\n    const utxos = await this.blockfrostRequest(\n      `/addresses/${CONTRACT_ADDRESS().to_bech32()}/utxos/${asset}`\n    );\n\n    return await Promise.all(\n      utxos.map(async (utxo) => {\n        const metadata = await this.blockfrostRequest(\n          `/txs/${utxo.tx_hash}/metadata`\n        );\n        let datum;\n        let tradeOwnerAddress;\n        try {\n          datum = metadata\n            .find((m) => m.label == DATUM_LABEL)\n            .json_metadata[utxo.output_index].slice(2);\n          if (datum != toHex(START_BID().to_bytes()))\n            //STARTBID doesn't have a tradeOwner\n            tradeOwnerAddress = metadata\n              .find((m) => m.label == ADDRESS_LABEL)\n              .json_metadata.address.slice(2);\n        } catch (e) {\n          throw new Error(\"Some required metadata entries were not found\");\n        }\n        datum = Loader.Cardano.PlutusData.from_bytes(fromHex(datum));\n        if (\n          toHex(Loader.Cardano.hash_plutus_data(datum).to_bytes()) !==\n          utxo.data_hash\n        )\n          throw new Error(\"Datum hash doesn't match\");\n\n        return {\n          datum,\n          tradeOwnerAddress:\n            tradeOwnerAddress &&\n            Loader.Cardano.Address.from_bytes(fromHex(tradeOwnerAddress)),\n          utxo: Loader.Cardano.TransactionUnspentOutput.new(\n            Loader.Cardano.TransactionInput.new(\n              Loader.Cardano.TransactionHash.from_bytes(fromHex(utxo.tx_hash)),\n              utxo.output_index\n            ),\n            Loader.Cardano.TransactionOutput.new(\n              CONTRACT_ADDRESS(),\n              assetsToValue(utxo.amount)\n            )\n          ),\n          budId,\n        };\n      })\n    );\n  }\n\n  /**\n   *@private\n   */\n  async initTx() {\n    const txBuilder = Loader.Cardano.TransactionBuilder.new(\n      Loader.Cardano.LinearFee.new(\n        Loader.Cardano.BigNum.from_str(\n          this.protocolParameters.linearFee.minFeeA\n        ),\n        Loader.Cardano.BigNum.from_str(\n          this.protocolParameters.linearFee.minFeeB\n        )\n      ),\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo),\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.poolDeposit),\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.keyDeposit),\n      this.protocolParameters.maxValSize,\n      this.protocolParameters.maxTxSize,\n      this.protocolParameters.priceMem,\n      this.protocolParameters.priceStep,\n      Loader.Cardano.LanguageViews.new(Buffer.from(languageViews, \"hex\"))\n    );\n    const datums = Loader.Cardano.PlutusList.new();\n    const metadata = { [DATUM_LABEL]: {}, [ADDRESS_LABEL]: {} };\n    const outputs = Loader.Cardano.TransactionOutputs.new();\n    return { txBuilder, datums, metadata, outputs };\n  }\n\n  /**\n   * @private\n   */\n  policyBidLength(value) {\n    if (!value.multiasset()) return 0;\n    const policy = Loader.Cardano.ScriptHash.from_bytes(\n      Loader.Cardano.Ed25519KeyHash.from_bytes(\n        fromHex(this.contractInfo.policyBid)\n      ).to_bytes()\n    );\n    return value.multiasset().get(policy).len();\n  }\n\n  /**\n   * @private\n   */\n  policyBidRemaining(value, budId) {\n    const assets = valueToAssets(value);\n    return assetsToValue(\n      assets.filter(\n        (asset) =>\n          asset.unit !=\n            this.contractInfo.policyBid +\n              fromAscii(this.contractInfo.prefixSpaceBudBid + budId) &&\n          asset.unit.startsWith(this.contractInfo.policyBid)\n      )\n    );\n  }\n\n  /**\n   * @private\n   */\n  createOutput(\n    address,\n    value,\n    { datum, index, tradeOwnerAddress, metadata } = {}\n  ) {\n    const v = value;\n    const minAda = Loader.Cardano.min_ada_required(\n      v,\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo),\n      datum && Loader.Cardano.hash_plutus_data(datum)\n    );\n    if (minAda.compare(v.coin()) == 1) v.set_coin(minAda);\n    const output = Loader.Cardano.TransactionOutput.new(address, v);\n    if (datum) {\n      output.set_data_hash(Loader.Cardano.hash_plutus_data(datum));\n      metadata[DATUM_LABEL][index] = \"0x\" + toHex(datum.to_bytes());\n    }\n    if (tradeOwnerAddress) {\n      metadata[ADDRESS_LABEL].address =\n        \"0x\" + toHex(tradeOwnerAddress.to_address().to_bytes());\n    }\n    return output;\n  }\n\n  /**\n   * @private\n   */\n  setCollateral(txBuilder, utxos) {\n    const inputs = Loader.Cardano.TransactionInputs.new();\n    utxos.forEach((utxo) => {\n      inputs.add(utxo.input());\n    });\n    txBuilder.set_collateral(inputs);\n  }\n\n  /**\n   * @private\n   */\n  async finalizeTx({\n    txBuilder,\n    changeAddress,\n    utxos,\n    outputs,\n    datums,\n    metadata,\n    scriptUtxo,\n    action,\n  }) {\n    const transactionWitnessSet = Loader.Cardano.TransactionWitnessSet.new();\n    let { input, change } = CoinSelection.randomImprove(\n      utxos,\n      outputs,\n      8,\n      scriptUtxo ? [scriptUtxo] : []\n    );\n    input.forEach((utxo) => {\n      txBuilder.add_input(\n        utxo.output().address(),\n        utxo.input(),\n        utxo.output().amount()\n      );\n    });\n    for (let i = 0; i < outputs.len(); i++) {\n      txBuilder.add_output(outputs.get(i));\n    }\n    if (scriptUtxo) {\n      const redeemers = Loader.Cardano.Redeemers.new();\n      const redeemerIndex = txBuilder\n        .index_of_input(scriptUtxo.input())\n        .toString();\n      redeemers.add(action(redeemerIndex));\n      txBuilder.set_redeemers(\n        Loader.Cardano.Redeemers.from_bytes(redeemers.to_bytes())\n      );\n      txBuilder.set_plutus_data(\n        Loader.Cardano.PlutusList.from_bytes(datums.to_bytes())\n      );\n      txBuilder.set_plutus_scripts(CONTRACT());\n      const collateral = (await window.cardano.getCollateral()).map((utxo) =>\n        Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n      );\n      if (collateral.length <= 0) throw new Error(\"NO_COLLATERAL\");\n      this.setCollateral(txBuilder, collateral);\n\n      transactionWitnessSet.set_plutus_scripts(CONTRACT());\n      transactionWitnessSet.set_plutus_data(datums);\n      transactionWitnessSet.set_redeemers(redeemers);\n    }\n    let aux_data;\n    if (metadata) {\n      aux_data = Loader.Cardano.AuxiliaryData.new();\n      const generalMetadata = Loader.Cardano.GeneralTransactionMetadata.new();\n      Object.keys(metadata).forEach((label) => {\n        Object.keys(metadata[label]).length > 0 &&\n          generalMetadata.insert(\n            Loader.Cardano.BigNum.from_str(label),\n            Loader.Cardano.encode_json_str_to_metadatum(\n              JSON.stringify(metadata[label]),\n              1\n            )\n          );\n      });\n      aux_data.set_metadata(generalMetadata);\n      txBuilder.set_auxiliary_data(aux_data);\n    }\n\n    const changeMultiAssets = change.multiasset();\n\n    // check if change value is too big for single output\n    if (\n      changeMultiAssets &&\n      change.to_bytes().length * 2 > this.protocolParameters.maxValSize\n    ) {\n      const partialChange = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(\"0\")\n      );\n\n      const partialMultiAssets = Loader.Cardano.MultiAsset.new();\n      const policies = changeMultiAssets.keys();\n      const makeSplit = () => {\n        for (let j = 0; j < changeMultiAssets.len(); j++) {\n          const policy = policies.get(j);\n          const policyAssets = changeMultiAssets.get(policy);\n          const assetNames = policyAssets.keys();\n          const assets = Loader.Cardano.Assets.new();\n          for (let k = 0; k < assetNames.len(); k++) {\n            const policyAsset = assetNames.get(k);\n            const quantity = policyAssets.get(policyAsset);\n            assets.insert(policyAsset, quantity);\n            //check size\n            const checkMultiAssets = Loader.Cardano.MultiAsset.from_bytes(\n              partialMultiAssets.to_bytes()\n            );\n            checkMultiAssets.insert(policy, assets);\n            const checkValue = Loader.Cardano.Value.new(\n              Loader.Cardano.BigNum.from_str(\"0\")\n            );\n            checkValue.set_multiasset(checkMultiAssets);\n            if (\n              checkValue.to_bytes().length * 2 >=\n              this.protocolParameters.maxValSize\n            ) {\n              partialMultiAssets.insert(policy, assets);\n              return;\n            }\n          }\n          partialMultiAssets.insert(policy, assets);\n        }\n      };\n      makeSplit();\n      partialChange.set_multiasset(partialMultiAssets);\n      const minAda = Loader.Cardano.min_ada_required(\n        partialChange,\n        Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo)\n      );\n      partialChange.set_coin(minAda);\n\n      txBuilder.add_output(\n        Loader.Cardano.TransactionOutput.new(\n          changeAddress.to_address(),\n          partialChange\n        )\n      );\n    }\n\n    txBuilder.add_change_if_needed(changeAddress.to_address());\n    const txBody = txBuilder.build();\n    const tx = Loader.Cardano.Transaction.new(\n      txBody,\n      Loader.Cardano.TransactionWitnessSet.from_bytes(\n        transactionWitnessSet.to_bytes()\n      ),\n      aux_data\n    );\n    const size = tx.to_bytes().length * 2;\n    console.log(size);\n    if (size > this.protocolParameters.maxTxSize)\n      throw new Error(\"MAX_SIZE_REACHED\");\n    let txVkeyWitnesses = await window.cardano.signTx(\n      toHex(tx.to_bytes()),\n      true\n    );\n    txVkeyWitnesses = Loader.Cardano.TransactionWitnessSet.from_bytes(\n      fromHex(txVkeyWitnesses)\n    );\n    transactionWitnessSet.set_vkeys(txVkeyWitnesses.vkeys());\n    const signedTx = Loader.Cardano.Transaction.new(\n      tx.body(),\n      transactionWitnessSet,\n      tx.auxiliary_data()\n    );\n\n    console.log(\"Full Tx Size\", signedTx.to_bytes().length);\n\n    const txHash = await window.cardano.submitTx(toHex(signedTx.to_bytes()));\n    return txHash;\n  }\n\n  /**\n   * @private\n   */\n  splitAmount(lovelaceAmount, address, outputs) {\n    if (\n      lovelaceAmount.compare(Loader.Cardano.BigNum.from_str(\"400000000\")) ==\n        1 ||\n      lovelaceAmount.compare(Loader.Cardano.BigNum.from_str(\"400000000\")) == 0\n    ) {\n      const [amount1, amount2, amount3] = [\n        lovelacePercentage(lovelaceAmount, this.contractInfo.owner1.fee2),\n        lovelacePercentage(lovelaceAmount, this.contractInfo.owner2.fee),\n        lovelacePercentage(lovelaceAmount, this.contractInfo.extraFee),\n      ];\n      if (\n        this.extraFeeRecipient.to_bech32() ==\n        this.contractInfo.owner1.address.to_bech32() // if owner is same as fee recipient, no reason to split up utxo extra\n      ) {\n        outputs.add(\n          this.createOutput(\n            this.contractInfo.owner1.address,\n            Loader.Cardano.Value.new(amount1.checked_add(amount3))\n          )\n        );\n      } else {\n        outputs.add(\n          this.createOutput(\n            this.contractInfo.owner1.address,\n            Loader.Cardano.Value.new(amount1)\n          )\n        );\n        outputs.add(\n          this.createOutput(\n            this.extraFeeRecipient,\n            Loader.Cardano.Value.new(amount3)\n          )\n        );\n      }\n\n      outputs.add(\n        this.createOutput(\n          this.contractInfo.owner2.address,\n          Loader.Cardano.Value.new(amount2)\n        )\n      );\n\n      outputs.add(\n        this.createOutput(\n          address,\n          Loader.Cardano.Value.new(\n            lovelaceAmount\n              .checked_sub(amount1)\n              .checked_sub(amount2)\n              .checked_sub(amount3)\n          )\n        )\n      );\n    } else {\n      const amount1 = lovelacePercentage(\n        lovelaceAmount,\n        this.contractInfo.owner1.fee1\n      );\n      outputs.add(\n        this.createOutput(\n          this.contractInfo.owner1.address,\n          Loader.Cardano.Value.new(amount1)\n        )\n      );\n      outputs.add(\n        this.createOutput(\n          address,\n          Loader.Cardano.Value.new(lovelaceAmount.checked_sub(amount1))\n        )\n      );\n    }\n  }\n\n  async load() {\n    await Loader.load();\n    const p = await this.blockfrostRequest(`/epochs/latest/parameters`);\n    // this.protocolParameters = {\n    //   linearFee: {\n    //     minFeeA: p.min_fee_a.toString(),\n    //     minFeeB: p.min_fee_b.toString(),\n    //   },\n    //   minUtxo: \"1000000\",\n    //   poolDeposit: p.pool_deposit,\n    //   keyDeposit: p.key_deposit,\n    //   maxValSize: parseInt(p.max_val_size),\n    //   maxTxSize: parseInt(p.max_tx_size),\n    //   priceMem: parseFloat(p.price_mem),\n    //   priceStep: parseFloat(p.price_step),\n    // };\n    //TODO: wait for blockfrost fix\n    this.protocolParameters = {\n      linearFee: {\n        minFeeA: p.min_fee_a.toString(),\n        minFeeB: p.min_fee_b.toString(),\n      },\n      minUtxo: \"1000000\",\n      poolDeposit: \"500000000\",\n      keyDeposit: \"2000000\",\n      maxValSize: \"5000\",\n      maxTxSize: 16384,\n      priceMem: 5.77e-2,\n      priceStep: 7.21e-5,\n    };\n\n    this.contractInfo = {\n      policySpaceBudz:\n        \"d5e6bf0500378d4f0da4e8dde6becec7621cd8cbf5cbb9b87013d4cc\",\n      policyBid: \"800df05a0cc6b6f0d28aaa1812135bd9eebfbf5e8e80fd47da9989eb\",\n      prefixSpaceBud: \"SpaceBud\",\n      prefixSpaceBudBid: \"SpaceBudBid\",\n      owner1: {\n        address: Loader.Cardano.Address.from_bech32(\n          \"addr1qxpxm8a0uxe6eu2m6fgdu6wqfclujtzyjdu9jw0qdxfjaz02h5ngjz7fftac5twlxj6jha4meenh6476m5xdwmeyh4hq0zeknx\"\n        ),\n        fee1: Loader.Cardano.BigNum.from_str(\"416\"), // 2.4%\n        fee2: Loader.Cardano.BigNum.from_str(\"625\"), // 1.6%\n      },\n      owner2: {\n        address: Loader.Cardano.Address.from_bech32(\n          \"addr1qxyzd8utq5d88ycqle6r57e32qn0gc2vuysk5ja5t4lapavecd72l0wcsvv6t3vgj097k6a5jr4lz5pppkkf6tp83s2q9sv7dv\"\n        ),\n        fee: Loader.Cardano.BigNum.from_str(\"2500\"), // 0.4%\n      },\n      extraFee: Loader.Cardano.BigNum.from_str(\"2500\"), // 0.4%\n      minPrice: Loader.Cardano.BigNum.from_str(\"70000000\"),\n      bidStep: Loader.Cardano.BigNum.from_str(\"10000\"),\n    };\n    this.extraFeeRecipient = Loader.Cardano.Address.from_bech32(\n      this.extraFeeRecipient\n    );\n\n    CoinSelection.setProtocolParameters(\n      this.protocolParameters.minUtxo,\n      this.protocolParameters.linearFee.minFeeA,\n      this.protocolParameters.linearFee.minFeeB,\n      this.protocolParameters.maxTxSize.toString()\n    );\n  }\n\n  /**\n   *\n   * @param {number} budId\n   * @returns {TradeUtxo | TradeUtxo[] | undefined} Array if both twins are offered\n   */\n  async getOffer(budId) {\n    const offerUtxo = await this.getUtxo(\n      this.contractInfo.policySpaceBudz,\n      this.contractInfo.prefixSpaceBud,\n      budId.toString()\n    );\n    if (offerUtxo.length === 1) {\n      const lovelace = getTradeDetails(offerUtxo[0].datum).requestedAmount;\n      if (lovelace.compare(this.contractInfo.minPrice) == -1) return null;\n      return { ...offerUtxo[0], lovelace: lovelace.to_str() };\n    }\n    if (offerUtxo.length === 2 && (budId == 1903 || budId == 6413)) {\n      const utxos = offerUtxo\n        .map((utxo) => {\n          const lovelace = getTradeDetails(utxo.datum).requestedAmount;\n          if (lovelace.compare(this.contractInfo.minPrice) == -1) return null;\n          return { ...utxo, lovelace: lovelace.to_str() };\n        })\n        .filter((utxo) => utxo != null);\n      // if both twins are offered, but one < minPrice filter it out and do not return an array\n      // if both are < minPrice return null\n      if (utxos.length <= 0) return null;\n      if (utxos.length < 2) return utxos[0];\n      return utxos;\n    }\n\n    return null;\n  }\n\n  /**\n   *\n   * @param {number} budId\n   * @returns {TradeUtxo}\n   */\n  async getBid(budId) {\n    const bidUtxo = await this.getUtxo(\n      this.contractInfo.policyBid,\n      this.contractInfo.prefixSpaceBudBid,\n      budId.toString()\n    );\n    if (bidUtxo.length !== 1) return null;\n    const lovelace = bidUtxo[0].utxo.output().amount().coin().to_str();\n    return { ...bidUtxo[0], lovelace };\n  }\n\n  /**\n   * @param {TradeUtxo} bidUtxo\n   * @param {string} bidAmount lovelace amount\n   * @returns {string} Transaction Id\n   */\n  async bid(bidUtxo, bidAmount) {\n    const { txBuilder, datums, metadata, outputs } = await this.initTx();\n    const budId = bidUtxo.budId;\n\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n    datums.add(bidUtxo.datum);\n\n    const bidDatum = BID({\n      tradeOwner: toHex(walletAddress.payment_cred().to_keyhash().to_bytes()),\n      budId,\n    });\n\n    const datumType = bidUtxo.datum.as_constr_plutus_data().tag().as_i32();\n    const value = bidUtxo.utxo.output().amount();\n    if (datumType === DATUM_TYPE.StartBid) {\n      if (\n        Loader.Cardano.BigNum.from_str(bidAmount).compare(\n          this.contractInfo.minPrice\n        ) == -1\n      )\n        throw new Error(\"Amount too small\");\n      if (this.policyBidLength(value) > 1) {\n        outputs.add(\n          this.createOutput(\n            CONTRACT_ADDRESS(),\n            assetsToValue([\n              { unit: \"lovelace\", quantity: bidAmount },\n              {\n                unit:\n                  this.contractInfo.policyBid +\n                  fromAscii(this.contractInfo.prefixSpaceBudBid + budId),\n                quantity: \"1\",\n              },\n            ]),\n            {\n              datum: bidDatum,\n              index: 0,\n              tradeOwnerAddress: walletAddress,\n              metadata,\n            }\n          )\n        );\n        datums.add(bidDatum);\n        outputs.add(\n          this.createOutput(\n            CONTRACT_ADDRESS(),\n            this.policyBidRemaining(bidUtxo.utxo.output().amount(), budId),\n            {\n              datum: START_BID(),\n              index: 1,\n              metadata,\n            }\n          )\n        );\n        datums.add(START_BID());\n      } else {\n        outputs.add(\n          this.createOutput(\n            CONTRACT_ADDRESS(),\n            assetsToValue([\n              { unit: \"lovelace\", quantity: bidAmount },\n              {\n                unit:\n                  this.contractInfo.policyBid +\n                  fromAscii(this.contractInfo.prefixSpaceBudBid + budId),\n                quantity: \"1\",\n              },\n            ]),\n            {\n              datum: bidDatum,\n              index: 0,\n              tradeOwnerAddress: walletAddress,\n              metadata,\n            }\n          )\n        );\n        datums.add(bidDatum);\n      }\n    } else if (datumType == DATUM_TYPE.Bid) {\n      if (\n        Loader.Cardano.BigNum.from_str(bidAmount).compare(\n          this.contractInfo.bidStep.checked_add(value.coin())\n        ) == -1\n      )\n        throw new Error(\"Amount too small\");\n      outputs.add(\n        this.createOutput(\n          CONTRACT_ADDRESS(),\n          assetsToValue([\n            { unit: \"lovelace\", quantity: bidAmount },\n            {\n              unit:\n                this.contractInfo.policyBid +\n                fromAscii(this.contractInfo.prefixSpaceBudBid + budId),\n              quantity: \"1\",\n            },\n          ]),\n          {\n            datum: bidDatum,\n            index: 0,\n            tradeOwnerAddress: walletAddress,\n            metadata,\n          }\n        )\n      );\n      datums.add(bidDatum);\n      if (\n        bidUtxo.tradeOwnerAddress.to_bech32() !=\n        walletAddress.to_address().to_bech32()\n      )\n        // check if bidder is owner of utxo. if so, not necessary to pay back to you own address\n        outputs.add(\n          this.createOutput(\n            bidUtxo.tradeOwnerAddress,\n            Loader.Cardano.Value.new(value.coin())\n          )\n        );\n      else {\n        const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n        requiredSigners.add(walletAddress.payment_cred().to_keyhash());\n        txBuilder.set_required_signers(requiredSigners);\n      }\n    }\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      metadata,\n      scriptUtxo: bidUtxo.utxo,\n      action: BID_HIGHER,\n    });\n    return txHash;\n  }\n\n  /**\n   *\n   * @param {TradeUtxo} bidUtxo\n   * @returns {string} Transaction Id\n   */\n  async sell(bidUtxo) {\n    const { txBuilder, datums, metadata, outputs } = await this.initTx();\n    const budId = bidUtxo.budId;\n\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n    datums.add(bidUtxo.datum);\n\n    const datumType = bidUtxo.datum.as_constr_plutus_data().tag().as_i32();\n    const value = bidUtxo.utxo.output().amount();\n    if (datumType !== DATUM_TYPE.Bid) throw new Error(\"Datum needs to be Bid\");\n    outputs.add(\n      this.createOutput(\n        CONTRACT_ADDRESS(),\n        assetsToValue([\n          {\n            unit:\n              this.contractInfo.policyBid +\n              fromAscii(this.contractInfo.prefixSpaceBudBid + budId),\n            quantity: \"1\",\n          },\n        ]),\n        {\n          datum: START_BID(),\n          index: 0,\n          metadata,\n        }\n      )\n    );\n    datums.add(START_BID());\n    this.splitAmount(value.coin(), walletAddress.to_address(), outputs);\n    outputs.add(\n      this.createOutput(\n        bidUtxo.tradeOwnerAddress,\n        assetsToValue([\n          {\n            unit:\n              this.contractInfo.policySpaceBudz +\n              fromAscii(this.contractInfo.prefixSpaceBud + budId),\n            quantity: \"1\",\n          },\n        ])\n      )\n    ); // bidder receiving SpaceBud\n\n    const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n    requiredSigners.add(walletAddress.payment_cred().to_keyhash());\n    txBuilder.set_required_signers(requiredSigners);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      metadata,\n      scriptUtxo: bidUtxo.utxo,\n      action: SELL,\n    });\n    return txHash;\n  }\n\n  /**\n   *\n   * @param {number} budId\n   * @param {string} requestedAmount lovelace\n   * @returns {string} Transaction Id\n   */\n  async offer(budId, requestedAmount) {\n    const { txBuilder, datums, metadata, outputs } = await this.initTx();\n    budId = budId.toString();\n    if (\n      Loader.Cardano.BigNum.from_str(requestedAmount).compare(\n        this.contractInfo.minPrice\n      ) == -1\n    )\n      throw new Error(\"Amount too small\");\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n    const offerDatum = OFFER({\n      tradeOwner: toHex(walletAddress.payment_cred().to_keyhash().to_bytes()),\n      budId,\n      requestedAmount,\n    });\n    outputs.add(\n      this.createOutput(\n        CONTRACT_ADDRESS(),\n        assetsToValue([\n          {\n            unit:\n              this.contractInfo.policySpaceBudz +\n              fromAscii(this.contractInfo.prefixSpaceBud + budId),\n            quantity: \"1\",\n          },\n        ]),\n        {\n          datum: offerDatum,\n          index: 0,\n          tradeOwnerAddress: walletAddress,\n          metadata,\n        }\n      )\n    );\n    datums.add(offerDatum);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      metadata,\n    });\n    return txHash;\n  }\n\n  /**\n   * @param {TradeUtxo} offerUtxo\n   * @returns {string} Transaction Id\n   */\n  async buy(offerUtxo) {\n    const { txBuilder, datums, outputs } = await this.initTx();\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n    datums.add(offerUtxo.datum);\n\n    const datumType = offerUtxo.datum.as_constr_plutus_data().tag().as_i32();\n    const tradeDetails = getTradeDetails(offerUtxo.datum);\n    const value = offerUtxo.utxo.output().amount();\n    const lovelaceAmount = tradeDetails.requestedAmount;\n    if (datumType !== DATUM_TYPE.Offer)\n      throw new Error(\"Datum needs to be Offer\");\n    this.splitAmount(lovelaceAmount, offerUtxo.tradeOwnerAddress, outputs);\n\n    outputs.add(this.createOutput(walletAddress.to_address(), value)); // buyer receiving SpaceBud\n\n    const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n    requiredSigners.add(walletAddress.payment_cred().to_keyhash());\n    txBuilder.set_required_signers(requiredSigners);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      scriptUtxo: offerUtxo.utxo,\n      action: BUY,\n    });\n    return txHash;\n  }\n\n  /**\n   * @param {TradeUtxo} offerUtxo\n   * @returns {string} Transaction Id\n   */\n  async cancelOffer(offerUtxo) {\n    const { txBuilder, datums, outputs } = await this.initTx();\n\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n    datums.add(offerUtxo.datum);\n\n    const datumType = offerUtxo.datum.as_constr_plutus_data().tag().as_i32();\n    const value = offerUtxo.utxo.output().amount();\n    if (datumType !== DATUM_TYPE.Offer)\n      throw new Error(\"Datum needs to be Offer\");\n    const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n    requiredSigners.add(getTradeDetails(offerUtxo.datum).tradeOwner);\n    txBuilder.set_required_signers(requiredSigners);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      scriptUtxo: offerUtxo.utxo,\n      action: CANCEL,\n    });\n    return txHash;\n  }\n\n  /**\n   * @param {TradeUtxo} bidUtxo\n   * @returns {string} Transaction Id\n   */\n  async cancelBid(bidUtxo) {\n    const { txBuilder, datums, metadata, outputs } = await this.initTx();\n    const budId = bidUtxo.budId;\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n    datums.add(bidUtxo.datum);\n\n    const datumType = bidUtxo.datum.as_constr_plutus_data().tag().as_i32();\n    const value = bidUtxo.utxo.output().amount();\n    if (datumType !== DATUM_TYPE.Bid) throw new Error(\"Datum needs to be Bid\");\n    outputs.add(\n      this.createOutput(\n        CONTRACT_ADDRESS(),\n        assetsToValue([\n          {\n            unit:\n              this.contractInfo.policyBid +\n              fromAscii(this.contractInfo.prefixSpaceBudBid + budId),\n            quantity: \"1\",\n          },\n        ]),\n        {\n          datum: START_BID(),\n          index: 0,\n          metadata,\n        }\n      )\n    );\n    datums.add(START_BID());\n    const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n    requiredSigners.add(getTradeDetails(bidUtxo.datum).tradeOwner);\n    txBuilder.set_required_signers(requiredSigners);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      metadata,\n      scriptUtxo: bidUtxo.utxo,\n      action: CANCEL,\n    });\n    return txHash;\n  }\n\n  /**\n   *\n   * @param {string} txHash Transaction Id\n   * @returns\n   */\n  async awaitConfirmation(txHash) {\n    return new Promise((res, rej) => {\n      const confirmation = setInterval(async () => {\n        const isConfirmed = await this.blockfrostRequest(`/txs/${txHash}`);\n        if (isConfirmed && !isConfirmed.error) {\n          clearInterval(confirmation);\n          res(txHash);\n          return;\n        }\n      }, 5000);\n    });\n  }\n}\n\nexport default SpaceBudzMarket;\n","export const contract =\n  \"591971010000332332233223232333332222233332222332232333222323332223233333333222222223233322232333322223232332232333222323332223232332233223232333332222233223322332233223322332222323223223232533530343330093333573466e1d401920042304e3055357426aae7940208cccd5cd19b875007480088c140c158d5d09aab9e500923333573466e1d40212000204f235058353059335738921035054310005a49926499263333573466e1d40112006205223333573466e1d40152004205523333573466e1d40192002205323333573466e1d401d2000205623505935305a3357389201035054310005b4992649926498cccd5cd19b8735573aa004900011980619191919191919191919191999ab9a3370e6aae75402920002333333333301a335028232323333573466e1cd55cea8012400046604060766ae854008c0b4d5d09aba25002235066353067335738921035054310006849926135573ca00226ea8004d5d0a80519a8140149aba150093335502f75ca05c6ae854020ccd540bdd728171aba1500733502804435742a00c66a05066aa0aa09aeb4d5d0a8029919191999ab9a3370e6aae754009200023350223232323333573466e1cd55cea80124000466a05466a086eb4d5d0a80118241aba135744a00446a0d46a60d666ae712401035054310006c49926135573ca00226ea8004d5d0a8011919191999ab9a3370e6aae7540092000233502833504375a6ae854008c120d5d09aba2500223506a35306b3357389201035054310006c49926135573ca00226ea8004d5d09aba250022350663530673357389201035054310006849926135573ca00226ea8004d5d0a80219a8143ae35742a00666a05066aa0aaeb88004d5d0a801181d1aba135744a00446a0c46a60c666ae71241035054310006449926135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a8011919191999ab9a3370ea00290031180f981e1aba135573ca00646666ae68cdc3a801240084603c608c6ae84d55cf280211999ab9a3370ea00690011180f18189aba135573ca00a46666ae68cdc3a80224000460426eb8d5d09aab9e500623505d35305e3357389201035054310005f49926499264984d55cea80089baa001357426ae8940088d4158d4c15ccd5ce2490350543100058499261057135055353056335738920103505435000574984d55cf280089baa001135573a6ea80044d55cea80089baa0012212330010030022001222222222212333333333300100b00a00900800700600500400300220012212330010030022001122123300100300212001122123300100300212001122123300100300212001212222300400521222230030052122223002005212222300100520011232230023758002640026aa080446666aae7c004940388cd4034c010d5d080118019aba200203f23232323333573466e1cd55cea801a4000466600e6464646666ae68cdc39aab9d5002480008cc034c0c4d5d0a80119a8098169aba135744a00446a0846a608666ae712401035054310004449926135573ca00226ea8004d5d0a801999aa805bae500a35742a00466a01eeb8d5d09aba2500223503e35303f335738921035054310004049926135744a00226aae7940044dd50009110919980080200180110009109198008018011000899aa800bae75a224464460046eac004c8004d540e888c8cccd55cf80112804919a80419aa81718031aab9d5002300535573ca00460086ae8800c0e84d5d08008891001091091198008020018900089119191999ab9a3370ea002900011a80418029aba135573ca00646666ae68cdc3a801240044a01046a06a6a606c66ae7124010350543100037499264984d55cea80089baa001121223002003112200112001232323333573466e1cd55cea8012400046600c600e6ae854008dd69aba135744a00446a05e6a606066ae71241035054310003149926135573ca00226ea80048848cc00400c00880048c8cccd5cd19b8735573aa002900011bae357426aae7940088d40acd4c0b0cd5ce2481035054310002d499261375400224464646666ae68cdc3a800a40084a00e46666ae68cdc3a8012400446a014600c6ae84d55cf280211999ab9a3370ea00690001280511a8171a981799ab9c490103505431000304992649926135573aa00226ea8004484888c00c0104488800844888004480048c8cccd5cd19b8750014800880188cccd5cd19b8750024800080188d4098d4c09ccd5ce2490350543100028499264984d55ce9baa0011220021220012001232323232323333573466e1d4005200c200b23333573466e1d4009200a200d23333573466e1d400d200823300b375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c46601a6eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc048c050d5d0a8049bae357426ae8940248cccd5cd19b875006480088c050c054d5d09aab9e500b23333573466e1d401d2000230133016357426aae7940308d40acd4c0b0cd5ce2481035054310002d49926499264992649926135573aa00826aae79400c4d55cf280109aab9e500113754002424444444600e01044244444446600c012010424444444600a010244444440082444444400644244444446600401201044244444446600201201040024646464646666ae68cdc3a800a400446660106eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d400920002300a300b357426aae7940188d4070d4c074cd5ce249035054310001e499264984d55cea80189aba25001135573ca00226ea80048488c00800c888488ccc00401401000c80048c8c8cccd5cd19b875001480088c018dd71aba135573ca00646666ae68cdc3a80124000460106eb8d5d09aab9e500423501635301733573892010350543100018499264984d55cea80089baa001212230020032122300100320011122232323333573466e1cd55cea80124000466aa010600c6ae854008c014d5d09aba25002235013353014335738921035054310001549926135573ca00226ea8004448848cc00400c00844800484888c00c01084888c00801048880048004488880104888800c488880084888800480048c8c8c8cccd5cd19b8735573aa006900011999111998068018010009bae35742a0066eb8d5d0a8011bad357426ae8940088d4018d4c01ccd5ce2481035054310000849926135744a00226aae7940044dd5000893090009000911091998008020018011000889191800800911980198010010009991999111919191991199911191919199119999111191919191999111991191919191919911991199999111119191919199911199911199999999111111119911999991111199991111991199119911991199119911991199119911919191919191919191919191919191919191999911119911919111119191919191a982c0049119119119119111911192999a983c80b909a983f00091129999a983300d099838999a837a83c9840008021a9aa84480a80b11000998389991199ab9a3371200400212402122026604c60c600a605800c60c6a02a660e26601aa02a004a66a611c026604ea03000621200226605a60c66603aa03000660c600a2c2660e26604ea030006660e2666a0dea0f26a6aa11202a02c440020fc6601aa02a0042660e2666a0dea0f26a6aa11202a02c440020fc660e26601aa02a004660e26601e6603aa030006004660106a05c60c600aa028426a60fc002444a6666a60cc0342c2660e26601e6603aa030a028004660e26605a00200e6601000200626604ea0300062c2a6666a60c402c2a66a6114026644666ae68cdc480100084680847009806800a40042a66a6a10402605802a2610e022c442a66a6a1080200226112022c46442a66a6a10e0200226a6aa114026a6aa11402a0044400444a666a610002002426a610a02002444660f06602800c004660f0660686a06a60d400c01c660f0666a0ec0d200290011a9aa848009a9aa84800a80411000912999a98430080090b10b0999a83c0359981a180d00724004603400442c2660e8666a0e40ca6605c60280109001180a0011a9aa846009a9aa84600a80211000912999a984100800909a9843808009111983d1980b0030011983d1981b1a81b9836003008199a83c035800a400442c2c442611c022c266aa11202602c006602c0022a66a6a10402605802a26110022c4646442a66a6a10c020022a666a60fa6a6aa11202a00644002426a610402002444660ea66022a00c004660ea660626a06460cea00c016666a0e60cc002900110b0b1109847008b09a9aa84380a800910010980a0008b0b0b299a9a840809a815091199aa83111299a984680a99a9a83a981418148011084800884700899802181398148010008800800991a981c8009111111111005280a8983f0b110a99a9a841808008801110a99a9a842808008a999a983e00d109a984080800911299a984880998080040010a99a98488099809003001080409843808b0a99a9848809980900300109843808b0803109a984080800911299a984880998090040010a99a98488099808003001080409844008b0a99a9848809980800300109844008b08030b1109842008b1191919191299a98460099815803241012179fa042660de6605660c266036a02ca0126054a004660de6605660c266036a02c6a6aa10e02010440046054a0066605660c266036a02c002605466052660526605200ca004a0066a6aaa0d6a0084440022660de6605660c266036a02ca0126054a00a6605660c266036a02c00260546605200ca00a26a6aaa0d2a00444400626a6aaa0d0a0024440042666aaa0d0660e80046a6aaa0ce00c444002660e80046a6aa1060200844002660e80040062660e60026a6aaa0cc00a44400426a6aaa0c400244400644660446660b200400e666a0cae2800c005200222330203330570020063335063714006002900111991180100099119900099000999aa8011919a81591199a8148018008011a81300099a8151111801980100090009119b8000148008005200030221200133233553022120012253353081013003002133507a00200110015079235355505e001222330653335063029006003333506305600148008d407c488ccd5415c88d4d541f400888ccd5416c88d4d5420404008894cd4c22004ccd5cd19b87001480002280422404400c4cc028ccd5541a001800800400c00c00400400c54cd4d41c8c8d4c0a0004888888888800d40104c19c588854cd4d41d00044008884c1ac584d4d541d140048800854cd4d41c0c06800c4c198588854cd4d41c80044c00c008884c1a8588d4c0acd4c0a400488800c88cd4c12c0089894cd4d418cc058010854cd4d4190c8d4c0a800488888888894cd4d41bcccd54c0ac4800540bc8d4d5420c04004894cd4c22804ccd5cd19b8f00200f08c0108b01135074003150730022135072353550830100122001150705006232323215335350683333333574800846666ae68cdc3a8012400846666aae7d4010941b08cccd55cf9aba25005253353506c306835742a00c426a0de60ec0022a0da4a0da0d40d246666ae68cdc3a801a400446666aae7d4014941b48cccd55cf9aba25006253353506d306935742a00e426a0e060f00022a0dc4a0dc0d60d446666ae68cdc3a8022400046666aae7d40188d41bc1d4941b81ac941b526499262506a2506a2506a2506a06721335507d301b00a00116135573aa00426aae7940044dd50008b0b09a98108009100111199aa980b090009119aa98060900091a9aa8388009119aa83a00119aa98078900091a9aa83a0009119aa83b801199a9aa80700091980a24000002446602a004002466028002900000099aa98060900091a9aa8388009119aa83a001199a9aa805800919aa98080900091a9aa83a8009119aa83c0011aa80900080091199aaa805010801000919aa98080900091a9aa83a8009119aa83c0011aa808000800999aaa80280e001000a8369a98100011111111111199aa981009000911a98180011111a981a8019119a982a8011299a984280999ab9a3371e02600210e0210c02266a0fc00a00e200e400ea0ee012222444666aa602c24002a0d866aa60142400246a6aa0de0024466aa0e40046aa018002666aa602c24002446a6aa0e000444a66a60ee666aa6036240026466a04444666a6a016006440040040026a6a0120024400266a01244a66a60f200420f620020f046a6aa0e6002446601400400a00c2006266a0e0008006a0da00266aa60142400246a6aa0de002446466aa0e6006600200a640026aa0f244a66a6a0e000226aa0180064426a6aa0ea00444a66a60f866018004010266aa02200e0022600c00600424424660020060042400222424446006008224424446600400a00822424446002008224002640026aa0d8442244a66a6a0ca0022a0ce44266a0d0600800466aa600c240020080024466e0000800488d4c05800888888888894cd4d416cccd54c05c48005406c94cd4c1d0ccd5cd19b8f00c00107607513505e0011505d003210761074235301800122200223530170012220012353014001220012233702004002400244666ae68cdc4001000832032890008919a800a82ca82d11a9805000911a98070011111111111299a9a829a9999a981500590a82a90a82a90a82a90999aa980809000a80a11a980e00091299a9837a99a9837999ab9a3371e6a6066004440046a6066008440040e20e02666ae68cdc39a9819801110009a981980211000838838083809a82c8018a82c005909a980d800911a980f800911199aa980a09000911a98120011111a9814804111a98158029119299a983d99a9826002919a98268021299a983e999ab9a3371e0040020fe0fc2a00620fc40fc466a609a00840fc4a66a60fa666ae68cdc780100083f83f0a801883f099a83a00500488048a99a9a83100190a99a9a8318011099a9825001119a9825801119a9827801119a9828001119813801000904080919a98280011040809198138010009110408091119a9826802104080911299a984100999ab9a3370e00c00610802106022a66a610402666ae68cdc3802801042008418089982b002000884180884180883e0a99a9a8310009083e083e283580789931a982899ab9c491024c6600052498c8004d5418088448894cd4d41680044008884cc014008ccd54c01c48004014010004c8004d5417c88448894cd4d41640044d401800c884ccd4024014c010008ccd54c01c4800401401000448d4d40140048800448d4d40100048800888ccd5cd19b8f00200105d05c13350022253353504200221003100150411221233001003002120012212330010030022001222222222212333333333300100b00a009008007006005004003002200122123300100300220012221233300100400300220012212330010030022001122123300100300212001122123300100300212001122123300100300212001121222300300411222002112220011200121222230040052122223003005212222300200521222230010052001221233001003002200121222222230070082212222222330060090082122222223005008122222220041222222200322122222223300200900822122222223300100900820012122300200322212233300100500400320012122300200321223001003200122333573466e1c0080040c00bc8ccc00800522100488100222323230010053200135503122335350280014800088d4d540b4008894cd4c0d0ccd5cd19b8f00200903603513007001130060033200135503022335350270014800088d4d540b0008894cd4c0ccccd5cd19b8f0020070350341001130060031122320013200135502e2253353502500110032213300600230040011222200412222003122220021222200120012222222221233333333300100a00900800700600500400300220011112221233300100400300211120011200112001225335301f002100110202323232323333333574800a46666ae68cdc39aab9d5005480008cccd55cfa8029280691999aab9f50052500e233335573ea00a4a01e46666aae7cd5d128031299a9a807a99a9a807a99a9a80798061aba1500921350122233301e0030020011501021533535010300d35742a012426a02660040022a0222a02042a66a6a020646666666ae900049404c9404c9404c8d4050dd6801128098081aba150082135013300200115011150102501000d00c00b00a2500c4989402c9402c9402c9402c0204d5d1280089aba25001135573ca00226ea80048ccccccd5d20009280312803128031280311a8039bae002003120012001121223002003112200112001122533353006002215333530070022153353019333573466e3cd4c030008888008d4c03000488800806c0684ccd5cd19b8735300c00222200135300c00122200101b01a101a213018161301716213017161533353006001213017162130171610192233223370600400266e08009201400126262122230030042122230020041222001200122212333001004003002200126262611220021221223300100400312001112212330010030021120012626261220021220012001112323001001223300330020020013322332233223333333330024891cd5e6bf0500378d4f0da4e8dde6becec7621cd8cbf5cbb9b87013d4cc0048811c800df05a0cc6b6f0d28aaa1812135bd9eebfbf5e8e80fd47da9989eb0048810853706163654275640048810b5370616365427564426964003335550044891c826d9fafe1b3acf15bd250de69c04e3fc92c4493785939e069932e8900483001920e209335500648811c88269f8b051a739300fe743a7b315026f4614ce1216a4bb45d7fd0f500482209d20882748203db810920a09c012222222221233333333300100a0090080070060050040030022001111222123330010040030021112001112212330010030021120011\";\n","export const languageViews =\n  \"a141005901d59f1a000302590001011a00060bc719026d00011a000249f01903e800011a000249f018201a0025cea81971f70419744d186419744d186419744d186419744d186419744d186419744d18641864186419744d18641a000249f018201a000249f018201a000249f018201a000249f01903e800011a000249f018201a000249f01903e800081a000242201a00067e2318760001011a000249f01903e800081a000249f01a0001b79818f7011a000249f0192710011a0002155e19052e011903e81a000249f01903e8011a000249f018201a000249f018201a000249f0182001011a000249f0011a000249f0041a000194af18f8011a000194af18f8011a0002377c190556011a0002bdea1901f1011a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000242201a00067e23187600010119f04c192bd200011a000249f018201a000242201a00067e2318760001011a000242201a00067e2318760001011a0025cea81971f704001a000141bb041a000249f019138800011a000249f018201a000302590001011a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a00330da70101ff\";\n","export default __webpack_public_path__ + \"static/show-01ee920e21084a873c96ab9e4054a024.svg\";","import { useDisclosure } from \"@chakra-ui/hooks\";\nimport React from \"react\";\nimport MiddleEllipsis from \"react-middle-ellipsis\";\n// import { Button } from \"../components/Button\";\nimport { navigate } from \"gatsby\";\nimport { useBreakpoint } from \"gatsby-plugin-breakpoints\";\nimport Metadata from \"../components/Metadata\";\nimport styled from \"styled-components\";\nimport {\n  ShareModal,\n  TradeModal,\n  SuccessTransactionToast,\n  PendingTransactionToast,\n  FailedTransactionToast,\n  tradeErrorHandler,\n} from \"../components/Modal\";\nimport { Share2 } from \"@geist-ui/react-icons\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Link,\n  Tooltip,\n  Button,\n  ButtonGroup,\n  IconButton,\n  Spinner,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { SmallCloseIcon, RepeatIcon } from \"@chakra-ui/icons\";\nimport { useStoreState } from \"easy-peasy\";\nimport Market from \"../cardano/market\";\nimport secrets from \"../../secrets\";\n\n//assets\nimport Show from \"../images/assets/show.svg\";\nimport { UnitDisplay } from \"../components/UnitDisplay\";\n\nexport const toHex = (bytes) => Buffer.from(bytes).toString(\"hex\");\n\nconst isBrowser = () => typeof window !== \"undefined\";\n\nconst SpaceBud = ({ pageContext: { spacebud } }) => {\n  const matches = useBreakpoint();\n  const toast = useToast();\n  const [owner, setOwner] = React.useState([]);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const tradeRef = React.useRef();\n  const [isLoadingMarket, setIsLoadingMarket] = React.useState(true);\n  const [details, setDetails] = React.useState({\n    bid: { bidUtxo: null, lovelace: null, usd: null, owner: false },\n    offer: { offerUtxo: null, lovelace: null, usd: null, owner: true },\n    lastSale: { lovelace: null, usd: null },\n  });\n  const [loadingButton, setLoadingButton] = React.useState({\n    cancelBid: false,\n    bid: false,\n    buy: false,\n    offer: false,\n    cancelOffer: false,\n    sell: false,\n  });\n  const connected = useStoreState((state) => state.connection.connected);\n  const market = React.useRef();\n\n  const POLICY = \"d5e6bf0500378d4f0da4e8dde6becec7621cd8cbf5cbb9b87013d4cc\"; // mainnet\n  const CONTRACT_ADDRESS =\n    \"addr1wyzynye0nksztrfzpsulsq7whr3vgh7uvp0gm4p0x42ckkqqq6kxq\";\n\n  React.useEffect(() => {\n    loadMarket();\n  }, []);\n  const firstUpdate = React.useRef(true);\n  React.useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    loadSpaceBudData();\n  }, [connected]);\n\n  const checkTransaction = async (txHash, { type, lovelace } = {}) => {\n    if (!txHash) return;\n    PendingTransactionToast(toast);\n    if (type) {\n      fetch(\"https://api.spacebudzbot.com/tweet\", {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer invalid\", //+ secrets.TWITTER_BOT_TOKEN,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ id: spacebud.id.toString(), type, lovelace }),\n      })\n        .then(console.log)\n        .catch(console.log);\n    }\n    await market.current.awaitConfirmation(txHash);\n    toast.closeAll();\n    SuccessTransactionToast(toast, txHash);\n    await new Promise((res, rej) => setTimeout(() => res(), 1000));\n    loadSpaceBudData();\n  };\n\n  const loadMarket = async () => {\n    market.current = new Market(\n      {\n        base: \"https://cardano-mainnet.blockfrost.io/api/v0\",\n        projectId: secrets.PROJECT_ID,\n      },\n      \"addr1qxpxm8a0uxe6eu2m6fgdu6wqfclujtzyjdu9jw0qdxfjaz02h5ngjz7fftac5twlxj6jha4meenh6476m5xdwmeyh4hq0zeknx\"\n    );\n    await market.current.load();\n    loadSpaceBudData();\n  };\n\n  const loadSpaceBudData = async () => {\n    setIsLoadingMarket(true);\n    setOwner([]);\n    const token = POLICY + toHex(`SpaceBud${spacebud.id}`);\n    let addresses = await fetch(\n      `https://cardano-mainnet.blockfrost.io/api/v0/assets/${token}/addresses`,\n      { headers: { project_id: secrets.PROJECT_ID } }\n    ).then((res) => res.json());\n    const fiatPrice = await fetch(\n      `https://api.coingecko.com/api/v3/simple/price?ids=cardano&vs_currencies=usd`\n    )\n      .then((res) => res.json())\n      .then((res) => res.cardano[\"usd\"]);\n    const lastSale = await fetch(\n      `https://spacebudz.io/api/specificSpaceBud/${spacebud.id}`\n    )\n      .then((res) => res.json())\n      .then((res) => res.lastSale);\n\n    const bidUtxo = await market.current.getBid(spacebud.id);\n    let offerUtxo = await market.current.getOffer(spacebud.id);\n    // check if twin\n    if (Array.isArray(offerUtxo)) {\n      if (\n        offerUtxo.length == 2 &&\n        (spacebud.id == 1903 || spacebud.id == 6413)\n      ) {\n        const ownerUtxo = offerUtxo.find(\n          (utxo) => utxo.tradeOwnerAddress.to_bech32() == connected\n        );\n        if (ownerUtxo) {\n          offerUtxo = ownerUtxo;\n        } else {\n          const offerUtxo1 = offerUtxo[0];\n          const offerUtxo2 = offerUtxo[1];\n          // set correct owner\n          addresses = [\n            { adddress: offerUtxo1.tradeOwnerAddress.to_bech32() },\n            { address: offerUtxo1.tradeOwnerAddress.to_bech32() },\n          ];\n          if (\n            isBrowser() &&\n            window.BigInt(offerUtxo1.lovelace) <\n              window.BigInt(offerUtxo2.lovelace)\n          ) {\n            offerUtxo = offerUtxo1;\n          } else {\n            offerUtxo = offerUtxo2;\n          }\n        }\n      } else throw new Error(\"Something went wrong\");\n    }\n    const details = {\n      bid: { bidUtxo: null, lovelace: null, usd: null, owner: false },\n      offer: { offerUtxo: null, lovelace: null, usd: null, owner: false },\n      lastSale: { lovelace: null, usd: null },\n    };\n    details.bid.bidUtxo = bidUtxo;\n    details.offer.offerUtxo = offerUtxo;\n    console.log(bidUtxo);\n    console.log(offerUtxo);\n    // ignore if state is StartBid\n    if (toHex(bidUtxo.datum.to_bytes()) !== \"d866820080\") {\n      if (bidUtxo.tradeOwnerAddress.to_bech32() === connected)\n        details.bid.owner = true;\n      details.bid.lovelace = bidUtxo.lovelace;\n      details.bid.usd = (bidUtxo.lovelace / 10 ** 6) * fiatPrice * 10 ** 2;\n    }\n    if (addresses.find((address) => address.address == connected))\n      details.offer.owner = true;\n    if (offerUtxo) {\n      addresses = addresses.map((address) =>\n        address.address == CONTRACT_ADDRESS\n          ? { address: offerUtxo.tradeOwnerAddress.to_bech32() }\n          : address\n      );\n      if (offerUtxo.tradeOwnerAddress.to_bech32() === connected)\n        details.offer.owner = true;\n      details.offer.lovelace = offerUtxo.lovelace;\n      details.offer.usd = (offerUtxo.lovelace / 10 ** 6) * fiatPrice * 10 ** 2;\n    }\n\n    if (lastSale) {\n      details.lastSale.lovelace = lastSale;\n      details.lastSale.usd = (lastSale / 10 ** 6) * fiatPrice * 10 ** 2;\n    }\n\n    //check if same address if there are 2\n\n    if (addresses.length > 1 && addresses[0].address == addresses[1].address) {\n      addresses = [addresses[0]];\n    }\n\n    setDetails(details);\n    setOwner(addresses);\n    setIsLoadingMarket(false);\n  };\n\n  return (\n    <>\n      <Metadata\n        titleTwitter=\"SpaceBudz: Collectible Astronauts\"\n        title={\"SpaceBudz | SpaceBud #\" + spacebud.id}\n        description={`SpaceBud #${spacebud.id}`}\n        image={spacebud.image}\n      />\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\",\n          marginTop: 150,\n          marginBottom: 100,\n        }}\n      >\n        <div\n          style={{\n            position: \"relative\",\n            paddingBottom: 35,\n            width: \"95%\",\n            borderRadius: 10,\n            backgroundImage: `url(${Show})`,\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: \"cover\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            color: \"white\",\n          }}\n        >\n          <div\n            style={{\n              zIndex: 10,\n              position: \"absolute\",\n              left: 25,\n              top: 25,\n              cursor: \"pointer\",\n            }}\n            onClick={() => onOpen()}\n          >\n            <Share2 size={26} />\n          </div>\n          {/* Modal */}\n          <ShareModal\n            bud={spacebud}\n            isOpen={isOpen}\n            onOpen={onOpen}\n            onClose={onClose}\n          />\n          <TradeModal\n            budId={spacebud.id}\n            ref={tradeRef}\n            market={market.current}\n            details={details}\n            onConfirm={checkTransaction}\n          />\n          {/* Modal End */}\n          <div\n            style={{\n              width: !matches.md ? 410 : 350,\n              height: !matches.md ? 410 : 350,\n              borderRadius: \"50%\",\n              marginTop: -15,\n              marginBottom: -50,\n            }}\n          >\n            <div style={{ width: \"100%\", position: \"relative\" }}>\n              {(spacebud.id == 1903 || spacebud.id == 6413) && (\n                <img\n                  src={spacebud.image}\n                  style={{\n                    position: \"absolute\",\n                    left: 20,\n                    top: -12,\n                    filter: \"brightness(0.7)\",\n                  }}\n                  width=\"100%\"\n                />\n              )}\n              <img\n                src={spacebud.image}\n                style={{ position: \"absolute\" }}\n                width=\"100%\"\n              />\n            </div>\n          </div>\n          <Box h={5} />\n          <div style={{ fontWeight: 600, fontSize: 30 }}>\n            SpaceBud #{spacebud.id}\n          </div>\n\n          <LinkName onClick={() => navigate(`/explore/?type=${spacebud.type}`)}>\n            {spacebud.type} Astronaut\n          </LinkName>\n        </div>\n        <Box h={6} />\n        {(spacebud.id == 1903 || spacebud.id == 6413) && (\n          <>\n            <div\n              style={{\n                fontWeight: 600,\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <div style={{ marginTop: -5 }}>Twins</div>\n              <Box w={2} />\n            </div>{\" \"}\n            <Box h={3} />\n          </>\n        )}\n        {owner.length > 0 ? (\n          owner.map((item, i) => (\n            <div\n              key={i}\n              style={{\n                marginBottom: 5,\n                paddingTop: 8,\n                paddingBottom: 8,\n                paddingLeft: 12,\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                fontSize: 16,\n                border: \"solid 2px #311b92\",\n                borderRadius: 25,\n                color: \"#777777\",\n              }}\n            >\n              <span>\n                <b>Owner:</b>{\" \"}\n              </span>\n              <div\n                style={{\n                  width: \"200px\",\n                  whiteSpace: \"nowrap\",\n                  textAlign: \"center\",\n                }}\n              >\n                <MiddleEllipsis>\n                  <Link\n                    underline\n                    color=\"purple.600\"\n                    onClick={(e) => {\n                      if (owner) navigate(`/profile?address=${item.address}`);\n                    }}\n                  >\n                    {item.address}\n                  </Link>\n                </MiddleEllipsis>\n              </div>\n            </div>\n          ))\n        ) : (\n          <>\n            <Box h={3} />\n            <Box display=\"flex\" alignItems=\"center\">\n              <Text color=\"GrayText\" mr=\"4\">\n                Owner\n              </Text>{\" \"}\n              <Spinner size=\"sm\" color=\"purple\" />\n            </Box>\n          </>\n        )}\n\n        <Box h={8} />\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            position: \"relative\",\n          }}\n        >\n          {isLoadingMarket ? (\n            <Box display=\"flex\" alignItems=\"center\">\n              <Text color=\"GrayText\" mr=\"4\">\n                Loading Market\n              </Text>{\" \"}\n              <Spinner size=\"sm\" color=\"purple\" />\n            </Box>\n          ) : (\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              flexDirection=\"column\"\n            >\n              <Box textAlign=\"center\">\n                <div\n                  style={{ fontSize: 12, fontWeight: \"bold\", marginBottom: 4 }}\n                >\n                  Last Sale\n                </div>\n                <UnitDisplay\n                  showQuantity={!Boolean(details.lastSale.lovelace)}\n                  fontWeight=\"medium\"\n                  quantity={details.lastSale.lovelace || 0}\n                  symbol=\"ADA\"\n                  decimals={6}\n                />\n                <UnitDisplay\n                  showQuantity={!Boolean(details.lastSale.usd)}\n                  fontSize={12}\n                  color=\"#777777\"\n                  quantity={details.lastSale.usd || 0}\n                  symbol=\"USD\"\n                  decimals={2}\n                />\n              </Box>\n              <Box h={6} />\n              <Box position=\"absolute\">\n                <Box position=\"absolute\" top=\"-30px\" left={-40}>\n                  {\" \"}\n                  <RepeatIcon cursor=\"pointer\" onClick={loadSpaceBudData} />\n                </Box>\n              </Box>\n              <Box display=\"flex\" alignItems=\"center\">\n                {details.offer.owner ? (\n                  <>\n                    <Box\n                      width={matches.md ? \"100px\" : \"150px\"}\n                      textAlign=\"right\"\n                    >\n                      <div style={{ fontSize: 12 }}>Sell now price</div>\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.bid.lovelace)}\n                        fontWeight=\"medium\"\n                        quantity={details.bid.lovelace || 0}\n                        symbol=\"ADA\"\n                        decimals={6}\n                      />\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.bid.usd)}\n                        fontSize={12}\n                        color=\"#777777\"\n                        quantity={details.bid.usd || 0}\n                        symbol=\"USD\"\n                        decimals={2}\n                      />\n                    </Box>\n                    <Box w={5} />\n                    {details.bid.owner ? (\n                      <Tooltip label=\"Cancel Bid\" rounded=\"3xl\">\n                        <Button\n                          isDisabled={loadingButton.cancelBid}\n                          isLoading={loadingButton.cancelBid}\n                          onClick={async () => {\n                            if (!connected) return;\n                            setLoadingButton((l) => ({\n                              ...l,\n                              cancelBid: true,\n                            }));\n                            const txHash = await market.current\n                              .cancelBid(details.bid.bidUtxo)\n                              .catch((e) => tradeErrorHandler(e, toast));\n                            setLoadingButton((l) => ({\n                              ...l,\n                              cancelBid: false,\n                            }));\n                            checkTransaction(txHash);\n                          }}\n                          rounded=\"3xl\"\n                          size=\"md\"\n                          color=\"white\"\n                          bgColor=\"red.300\"\n                          colorScheme=\"red\"\n                        >\n                          Cancel\n                        </Button>\n                      </Tooltip>\n                    ) : (\n                      <Tooltip\n                        label={\n                          details.offer.offerUtxo &&\n                          connected ==\n                            details.offer.offerUtxo.tradeOwnerAddress.to_bech32() &&\n                          \"Cancel Offer first\"\n                        }\n                        rounded=\"3xl\"\n                      >\n                        <Button\n                          isDisabled={\n                            !Boolean(details.bid.lovelace) || loadingButton.sell\n                          }\n                          isLoading={loadingButton.sell}\n                          rounded=\"3xl\"\n                          size=\"md\"\n                          colorScheme=\"purple\"\n                          width=\"min\"\n                          bgcolor=\"#263238\"\n                          rounded=\"3xl\"\n                          width=\"min\"\n                          onClick={async () => {\n                            if (\n                              !connected ||\n                              (details.offer.offerUtxo &&\n                                connected ==\n                                  details.offer.offerUtxo.tradeOwnerAddress.to_bech32())\n                            )\n                              return;\n                            setLoadingButton((l) => ({\n                              ...l,\n                              sell: true,\n                            }));\n                            const txHash = await market.current\n                              .sell(details.bid.bidUtxo)\n                              .catch((e) => tradeErrorHandler(e, toast));\n                            setLoadingButton((l) => ({\n                              ...l,\n                              sell: false,\n                            }));\n                            checkTransaction(txHash, {\n                              type: \"sold\",\n                              lovelace: details.bid.lovelace,\n                            });\n                          }}\n                        >\n                          Sell\n                        </Button>\n                      </Tooltip>\n                    )}\n                    <Box w={4} />\n                    <Box\n                      display=\"flex\"\n                      flexDirection=\"column\"\n                      alignItems=\"center\"\n                      justifyContent=\"center\"\n                    >\n                      {details.offer.lovelace &&\n                      details.offer.offerUtxo &&\n                      connected ==\n                        details.offer.offerUtxo.tradeOwnerAddress.to_bech32() ? (\n                        <Tooltip label=\"Cancel Offer\" rounded=\"3xl\">\n                          <Button\n                            isDisabled={loadingButton.cancelOffer}\n                            isLoading={loadingButton.cancelOffer}\n                            onClick={async () => {\n                              if (!connected) return;\n                              setLoadingButton((l) => ({\n                                ...l,\n                                cancelOffer: true,\n                              }));\n                              const txHash = await market.current\n                                .cancelOffer(details.offer.offerUtxo)\n                                .catch((e) => tradeErrorHandler(e, toast));\n                              setLoadingButton((l) => ({\n                                ...l,\n                                cancelOffer: false,\n                              }));\n                              checkTransaction(txHash);\n                            }}\n                            color=\"white\"\n                            bgColor=\"red.300\"\n                            colorScheme=\"red\"\n                            rounded=\"3xl\"\n                            aria-label=\"Add to friends\"\n                            icon={<SmallCloseIcon />}\n                          >\n                            Cancel\n                          </Button>\n                        </Tooltip>\n                      ) : (\n                        <Button\n                          variant=\"outline\"\n                          rounded=\"3xl\"\n                          colorScheme=\"gray\"\n                          onClick={() => {\n                            if (!connected) return;\n                            tradeRef.current.openModal({\n                              minPrice: \"70000000\",\n                              type: \"OFFER\",\n                            });\n                          }}\n                        >\n                          {/* Offer */}\n                          List\n                        </Button>\n                      )}\n                    </Box>\n                    <Box w={5} />\n                    <Box width={matches.md ? \"100px\" : \"150px\"}>\n                      <div style={{ fontSize: 12 }}>Ask price</div>\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.offer.lovelace)}\n                        fontWeight=\"medium\"\n                        quantity={details.offer.lovelace || 0}\n                        symbol=\"ADA\"\n                        decimals={6}\n                      />\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.offer.usd)}\n                        fontSize={12}\n                        color=\"#777777\"\n                        quantity={details.offer.usd || 0}\n                        symbol=\"USD\"\n                        decimals={2}\n                      />\n                    </Box>{\" \"}\n                  </>\n                ) : (\n                  <>\n                    {\" \"}\n                    <Box\n                      width={matches.md ? \"100px\" : \"150px\"}\n                      textAlign=\"right\"\n                    >\n                      <div style={{ fontSize: 12 }}>Buy now price</div>\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.offer.lovelace)}\n                        fontWeight=\"medium\"\n                        quantity={details.offer.lovelace || 0}\n                        symbol=\"ADA\"\n                        decimals={6}\n                      />\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.offer.usd)}\n                        fontSize={12}\n                        color=\"#777777\"\n                        quantity={details.offer.usd || 0}\n                        symbol=\"USD\"\n                        decimals={2}\n                      />\n                    </Box>\n                    <Box w={5} />\n                    <Tooltip\n                      label={\n                        (!connected && \"Connect wallet\") ||\n                        (details.bid.owner &&\n                          details.bid.lovelace &&\n                          \"Cancel Bid first\")\n                      }\n                      rounded=\"3xl\"\n                    >\n                      <Button\n                        isDisabled={\n                          !Boolean(details.offer.lovelace) || loadingButton.buy\n                        }\n                        isLoading={loadingButton.buy}\n                        onClick={async () => {\n                          if (!connected || details.bid.owner) return;\n                          setLoadingButton((l) => ({\n                            ...l,\n                            buy: true,\n                          }));\n                          const txHash = await market.current\n                            .buy(details.offer.offerUtxo)\n                            .catch((e) => tradeErrorHandler(e, toast));\n                          setLoadingButton((l) => ({\n                            ...l,\n                            buy: false,\n                          }));\n                          checkTransaction(txHash, {\n                            type: \"bought\",\n                            lovelace: details.offer.lovelace,\n                          });\n                        }}\n                        rounded=\"3xl\"\n                        size=\"md\"\n                        colorScheme=\"purple\"\n                        width=\"min\"\n                      >\n                        Buy\n                      </Button>\n                    </Tooltip>\n                    <Box w={4} />\n                    <Box\n                      display=\"flex\"\n                      flexDirection=\"column\"\n                      alignItems=\"center\"\n                      justifyContent=\"center\"\n                    >\n                      <ButtonGroup size=\"md\" isAttached variant=\"outline\">\n                        <Tooltip\n                          label={!connected && \"Connect wallet\"}\n                          rounded=\"3xl\"\n                        >\n                          <Button\n                            onClick={() => {\n                              if (!connected) return;\n                              tradeRef.current.openModal({\n                                minPrice: details.bid.lovelace\n                                  ? (\n                                      isBrowser() &&\n                                      window.BigInt(details.bid.lovelace) +\n                                        window.BigInt(\"10000\")\n                                    ).toString()\n                                  : \"70000000\",\n                                type: \"BID\",\n                              });\n                            }}\n                            bgcolor=\"#263238\"\n                            rounded=\"3xl\"\n                            colorScheme=\"gray\"\n                            width=\"min\"\n                          >\n                            Bid\n                          </Button>\n                        </Tooltip>\n                        {details.bid.owner && (\n                          <Tooltip label=\"Cancel Bid\" rounded=\"3xl\">\n                            <IconButton\n                              isDisabled={loadingButton.cancelBid}\n                              isLoading={loadingButton.cancelBid}\n                              onClick={async () => {\n                                if (!connected) return;\n                                setLoadingButton((l) => ({\n                                  ...l,\n                                  cancelBid: true,\n                                }));\n                                const txHash = await market.current\n                                  .cancelBid(details.bid.bidUtxo)\n                                  .catch((e) => tradeErrorHandler(e, toast));\n                                setLoadingButton((l) => ({\n                                  ...l,\n                                  cancelBid: false,\n                                }));\n                                checkTransaction(txHash);\n                              }}\n                              bgColor=\"red.300\"\n                              variant=\"solid\"\n                              rounded=\"3xl\"\n                              aria-label=\"Add to friends\"\n                              icon={<SmallCloseIcon />}\n                            />\n                          </Tooltip>\n                        )}\n                      </ButtonGroup>\n                    </Box>\n                    <Box w={5} />\n                    <Box width={matches.md ? \"100px\" : \"150px\"}>\n                      <div style={{ fontSize: 12 }}>Bid price</div>\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.bid.lovelace)}\n                        fontWeight=\"medium\"\n                        quantity={details.bid.lovelace || 0}\n                        symbol=\"ADA\"\n                        decimals={6}\n                      />\n                      <UnitDisplay\n                        showQuantity={!Boolean(details.bid.usd)}\n                        fontSize={12}\n                        color=\"#777777\"\n                        quantity={details.bid.usd || 0}\n                        symbol=\"USD\"\n                        decimals={2}\n                      />\n                    </Box>\n                  </>\n                )}\n              </Box>\n            </Box>\n          )}\n        </div>\n        {!isLoadingMarket && (\n          <>\n            <Box h={3} />\n            <Box fontSize={12} color=\"GrayText\">\n              Service Fee ~2.4%\n            </Box>{\" \"}\n          </>\n        )}\n        <Box h={8} />\n        <div style={{ fontSize: 26, color: \"#777777\", fontWeight: 600 }}>\n          Gadgets\n        </div>\n        <Box h={3} />\n        <div\n          style={{\n            width: 250,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Box\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              flexWrap: \"wrap\",\n            }}\n          >\n            {spacebud.gadgets.length > 0 ? (\n              spacebud.gadgets.map((gadget) => (\n                <Box key={gadget} p=\"1\">\n                  <Attribute\n                    onClick={() => navigate(`/explore/?gadget=${gadget}`)}\n                  >\n                    {gadget}\n                  </Attribute>\n                </Box>\n              ))\n            ) : (\n              <div style={{ fontSize: 14, opacity: 0.3 }}>No Gadgets</div>\n            )}\n          </Box>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst LinkName = styled.span`\n  cursor: pointer;\n  color: white;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Attribute = (props) => {\n  return (\n    <Box\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <LinkName onClick={() => props.onClick()}>\n        <div\n          style={{\n            display: \"table\",\n            height: 20,\n            backgroundColor: \"#9575cd\",\n            padding: \"3px 6px\",\n            borderRadius: 25,\n            fontSize: 14,\n            color: \"white\",\n            fontWeight: 500,\n            textAlign: \"center\",\n            verticalAlign: \"middle\",\n          }}\n        >\n          {props.children}\n        </div>\n      </LinkName>\n    </Box>\n  );\n};\n\nexport default SpaceBud;\n"],"names":["Loader","load","this","_wasm","fromHex","hex","Buffer","toHex","bytes","toString","toBytesNum","num","split","map","d","join","fromAscii","assetsToValue","assets","multiAsset","lovelace","find","asset","unit","Set","filter","slice","forEach","policy","policyAssets","assetsValue","insert","quantity","value","length","set_multiasset","getTradeDetails","datum","tradeDetails","as_constr_plutus_data","data","get","tradeOwner","as_bytes","budId","requestedAmount","as_integer","as_u64","lovelacePercentage","amount","p","checked_mul","checked_div","BigInt","window","protocolParameters","CoinSelection","setProtocolParameters","minUTxO","minFeeA","minFeeB","maxTxSize","randomImprove","inputs","outputs","limit","preset","Error","_minUTxOValue","len","i","addAmounts","output","utxoSelection","selection","remaining","subset","mergedOutputsAmounts","compiledAmountList","mergeOutputsAmounts","splitOutputsAmounts","amounts","splitAmounts","multiasset","mA","keys","scriptHash","j","_assets","assetName","to_bytes","_multiasset","_value","push","sortAmountList","coin","createSubSet","select","range","ideal","checked_add","maximum","improve","change","checked_sub","minAmount","maxFee","compare","minAda","input","outputAmount","minUTxOValue","randomSelect","cloneUTxOList","cloneValue","cloneUTxOSelection","e","message","sort","a","b","Number","searchAmountValue","isQtyFulfilled","utxo","splice","pop","descSelect","nbFreeUTxO","Math","floor","random","newAmount","abs","getAmountValue","compiledAmounts","amountList","sortOrder","sortInt","val","to_str","needle","haystack","undefined","cumulatedAmount","utxoList","big","group","candidate","gQty","cQty","cScriptHash","cAssetName","CONTRACT","scripts","add","CONTRACT_ADDRESS","START_BID","DATUM_TYPE","StartBid","BID","fieldsInner","Bid","OFFER","Offer","BUY","index","redeemerData","SELL","BID_HIGHER","CANCEL","SpaceBudzMarket","extraFeeRecipient","base","projectId","provider","blockfrostRequest","endpoint","headers","body","fetch","project_id","method","then","res","json","getUtxo","prefix","to_bech32","utxos","Promise","all","tx_hash","metadata","m","label","json_metadata","output_index","tradeOwnerAddress","address","data_hash","initTx","txBuilder","linearFee","minUtxo","poolDeposit","keyDeposit","maxValSize","priceMem","priceStep","from","datums","policyBidLength","contractInfo","policyBid","policyBidRemaining","multiAssets","assetNames","k","policyAsset","name","valueToAssets","prefixSpaceBudBid","startsWith","createOutput","v","set_coin","set_data_hash","to_address","setCollateral","set_collateral","finalizeTx","changeAddress","scriptUtxo","action","transactionWitnessSet","add_input","add_output","redeemers","redeemerIndex","index_of_input","set_redeemers","set_plutus_data","set_plutus_scripts","cardano","getCollateral","collateral","aux_data","generalMetadata","Object","JSON","stringify","set_metadata","set_auxiliary_data","changeMultiAssets","partialChange","partialMultiAssets","policies","checkMultiAssets","checkValue","makeSplit","add_change_if_needed","txBody","build","tx","size","console","log","signTx","txVkeyWitnesses","set_vkeys","vkeys","signedTx","auxiliary_data","submitTx","txHash","splitAmount","lovelaceAmount","owner1","fee2","owner2","fee","extraFee","amount1","amount2","amount3","fee1","min_fee_a","min_fee_b","policySpaceBudz","prefixSpaceBud","minPrice","bidStep","getOffer","offerUtxo","getBid","bidUtxo","bid","bidAmount","getUsedAddresses","from_bytes","walletAddress","from_address","getUtxos","bidDatum","payment_cred","to_keyhash","datumType","tag","as_i32","requiredSigners","set_required_signers","sell","offer","offerDatum","buy","cancelOffer","cancelBid","awaitConfirmation","rej","confirmation","setInterval","isConfirmed","error","clearInterval","isBrowser","LinkName","styled","Attribute","props","style","display","alignItems","justifyContent","onClick","height","backgroundColor","padding","borderRadius","fontSize","color","fontWeight","textAlign","verticalAlign","children","spacebud","pageContext","matches","useBreakpoint","toast","useToast","React","owner","setOwner","useDisclosure","isOpen","onOpen","onClose","tradeRef","isLoadingMarket","setIsLoadingMarket","usd","lastSale","details","setDetails","loadingButton","setLoadingButton","connected","useStoreState","state","connection","market","loadMarket","firstUpdate","current","loadSpaceBudData","checkTransaction","type","PendingTransactionToast","Authorization","id","catch","closeAll","SuccessTransactionToast","setTimeout","Market","secrets","token","addresses","fiatPrice","Array","isArray","ownerUtxo","offerUtxo1","offerUtxo2","adddress","Metadata","titleTwitter","title","description","image","width","flexDirection","marginTop","marginBottom","position","paddingBottom","backgroundImage","Show","backgroundRepeat","backgroundSize","zIndex","left","top","cursor","bud","ref","onConfirm","md","src","h","navigate","w","item","key","paddingTop","paddingLeft","border","whiteSpace","underline","mr","UnitDisplay","showQuantity","Boolean","symbol","decimals","rounded","isDisabled","isLoading","l","tradeErrorHandler","bgColor","colorScheme","bgcolor","icon","variant","openModal","isAttached","flexWrap","gadgets","gadget","opacity"],"sourceRoot":""}